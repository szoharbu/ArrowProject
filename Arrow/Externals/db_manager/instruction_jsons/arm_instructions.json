{
    "instructions": [
        {
            "mnemonic": "ABS",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Computes the absolute value of the signed integer value in the source register, and writes the result to the destination register.",
            "syntax": "ABS dest_reg, src_reg",
            "architecture_modes": ["AArch64"],
            "flags": ["N", "Z", "C", "V"]
        },
        {
            "mnemonic": "ADC",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg1",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "src_reg2",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Adds two register values and the Carry flag value, and writes the result to the destination register",
            "syntax": "ADC dest_reg, src_reg1, src_reg2",
            "architecture_modes": ["AArch64"],
            "flags": ["N", "Z", "C", "V"]
        },
        {
            "mnemonic": "ADD",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg1",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "src_reg2",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Adds the second operand (src_reg2) to the first operand (src_reg1) and stores the result in the destination register (dest_reg).",
            "syntax": "ADD dest_reg, src_reg1, src_reg2",
            "architecture_modes": ["AArch64"],
            "flags": ["N", "Z", "C", "V"]
        },
        {
            "mnemonic": "ADD",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "src_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Adds the second immediate operand (src_imm) to the first operand (src_reg) and stores the result in the destination register (dest_reg).",
            "syntax": "ADD dest_reg, src_reg, src_imm",
            "architecture_modes": ["AArch64"],
            "flags": ["N", "Z", "C", "V"]
        },
        {
            "mnemonic": "SUB",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg1",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "src_reg2",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Subtracts the second operand (src_reg2) from the first operand (src_reg1) and stores the result in the destination register (dest_reg).",
            "syntax": "SUB dest_reg, src_reg1, src_reg2",
            "architecture_modes": ["AArch64"],
            "flags": ["N", "Z", "C", "V"]
        },
        {
            "mnemonic": "SUB",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "src_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Subtracts the second immediate operand (src_imm) from the first operand (src_reg) and stores the result in the destination register (dest_reg).",
            "syntax": "SUB dest_reg, src_reg, src_imm",
            "architecture_modes": ["AArch64"],
            "flags": ["N", "Z", "C", "V"]
        },
        {
            "mnemonic": "MUL",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg1",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "src_reg2",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "arithmetic",
            "group": "multiplication",
            "description": "Multiplies the two operands (src_reg1 and src_reg2) and stores the result in the destination register (dest_reg).",
            "syntax": "MUL dest_reg, src_reg1, src_reg2",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "AND",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg1",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "src_reg2",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise AND operation between the two operands (src_reg1 and src_reg2) and stores the result in the destination register (dest_reg).",
            "syntax": "AND dest_reg, src_reg1, src_reg2",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "ORR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src1",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "src2",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise OR operation between the two operands and stores the result in the destination register.",
            "syntax": "ORR dest_reg, src1, src2",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "EOR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src1",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "src2",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise XOR operation between the two operands and stores the result in the destination register.",
            "syntax": "EOR dest_reg, src1, src2",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "MOV",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "arithmetic",
            "group": "data_transfer",
            "description": "Copies the value from the source operand to the destination register.",
            "syntax": "MOV dest_reg, src_reg",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "MOV",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "arithmetic",
            "group": "data_transfer",
            "description": "Copies the value from the source immediate operand to the destination register.",
            "syntax": "MOV dest_reg, src_imm",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "LDUR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "address",
                    "type": "mem",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "data_transfer",
            "group": "load",
            "description": "Loads data from memory into the destination register using the address in the operand.",
            "syntax": "LDUR dest_reg, [address]",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "STUR",
            "operands": [
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "address",
                    "type": "mem",
                    "role": "dest",
                    "size": "64"
                }
            ],
            "type": "data_transfer",
            "group": "store",
            "description": "Stores data from the source register to memory at the address specified by the operand.",
            "syntax": "STUR src_reg, [address]",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "CMP",
            "operands": [
                {
                    "name": "src_reg1",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "src_reg2",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "comparison",
            "group": "comparison",
            "description": "Compares the two operands by subtracting the second operand from the first, updating the flags based on the result.",
            "syntax": "CMP src_reg1, src_reg2",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "CMP",
            "operands": [
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "src_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "comparison",
            "group": "comparison",
            "description": "Compares the two operands by subtracting the second operand from the first, updating the flags based on the result.",
            "syntax": "CMP src_reg, src_imm",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "CSET",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "condition",
                    "type": "condition",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "comparison",
            "description": "Sets the destination register to 1 if the condition is true, otherwise sets it to 0.",
            "syntax": "CSET dest_reg, condition",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "LSL",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "shift",
                    "type": "imm",
                    "role": "src",
                    "size": "6"
                }
            ],
            "type": "shift",
            "group": "bitwise",
            "description": "Performs a logical shift left (LSL) on the source operand and stores the result in the destination register.",
            "syntax": "LSL dest_reg, src_reg, shift",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "LSR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "shift",
                    "type": "imm",
                    "role": "src",
                    "size": "6"
                }
            ],
            "type": "shift",
            "group": "bitwise",
            "description": "Performs a logical shift right (LSR) on the source operand and stores the result in the destination register.",
            "syntax": "LSR dest_reg, src_reg, shift",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "ASR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "shift",
                    "type": "imm",
                    "role": "src",
                    "size": "6"
                }
            ],
            "type": "shift",
            "group": "bitwise",
            "description": "Performs an arithmetic shift right (ASR) on the source operand and stores the result in the destination register.",
            "syntax": "ASR dest_reg, src_reg, shift",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "ROR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "shift",
                    "type": "imm",
                    "role": "src",
                    "size": "6"
                }
            ],
            "type": "shift",
            "group": "bitwise",
            "description": "Performs a rotate right (ROR) on the source operand and stores the result in the destination register.",
            "syntax": "ROR dest_reg, src_reg, shift",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "LDR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "64"
                },
                {
                    "name": "address",
                    "type": "mem",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "data_transfer",
            "group": "load",
            "description": "Loads data from memory into the destination register.",
            "syntax": "LDR dest_reg, [address]",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "STR",
            "operands": [
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "address",
                    "type": "mem",
                    "role": "dest",
                    "size": "64"
                }
            ],
            "type": "data_transfer",
            "group": "store",
            "description": "Stores data from the source register to memory at the address specified by the operand.",
            "syntax": "STR src_reg, [address]",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "BL",
            "operands": [
                {
                    "name": "label",
                    "type": "label",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "branch",
            "group": "control_flow",
            "description": "Branches to the target address specified by the label, saving the return address.",
            "syntax": "BL label",
            "architecture_modes": ["AArch64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "B",
            "operands": [
                {
                    "name": "label",
                    "type": "label",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "branch",
            "group": "control_flow",
            "description": "Branches to the target address specified by the label.",
            "syntax": "B label",
            "architecture_modes": ["AArch64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "NOP",
            "operands": [],
            "type": "system",
            "group": "control_flow",
            "description": "No operation, does nothing.",
            "syntax": "NOP",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "BR",
            "operands": [
                {
                    "name": "register",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                }
            ],
            "type": "branch",
            "group": "control_flow",
            "description": "Branches to the address stored in the given register.",
            "syntax": "BR register",
            "architecture_modes": ["AArch64"]
        },
        {
            "mnemonic": "CBZ",
            "operands": [
                {
                    "name": "reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "label",
                    "type": "label",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "branch",
            "group": "control_flow",
            "description": "Compares the value in the register to zero, and branches if it is zero.",
            "syntax": "CBZ reg, label",
            "architecture_modes": ["AArch64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "CBNZ",
            "operands": [
                {
                    "name": "reg",
                    "type": "reg",
                    "role": "src",
                    "size": "64"
                },
                {
                    "name": "label",
                    "type": "label",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "branch",
            "group": "control_flow",
            "description": "Compares the value in the register to zero, and branches if it is not zero.",
            "syntax": "CBNZ reg, label",
            "architecture_modes": ["AArch64"],
            "random_generate": "False"
        }
    ]
}
