#
# Format:
#
#      =>instructions
#        => ADC_32_addsub_carry
#             =>  mnemonic
#             =>  instr_class
#             =>  asmtemplate
#             =>  feature
#             =>  asl = {iformid=>, iclassid=>, encoding_name=>, iform=>, decode_hier=>}
#             =>  usl {flow=>, decoder=>, steering=>[steering1, steering2, ...]
#             =>  fix_encode {value=>, mask=>, sb_value=>, sb_mask=>}
#             =>  var_encode {name => {hibit=>, width=>, encode=>, reginfo=>},...]
#             =>  constraint {name => {type=>'normal', constraints=>[{name=>val, boolean=>, label=>}, ...]}
#             =>              name => {type=>'cross',  constraints=>[{nmae=>val, name=>val,..,boolean=>,label=>}, ..]
#             =>  undef_constraint [{name=>{mask=>, value=>},name=>{mask=>, value=>}, ...}, ...]}
#             =>  undef_debug_constraint [{name=>{mask=>, value=>},name=>{mask=>, value=>}, ...}, ...]}
#                              .......
#        => ....
#      .
#      .
#
#   reginfo=> {type=>, use=>,  num=>}
#
# isa_lib.yml
# #
abs_32_dp_1src:
  mnemonic: ABS
  instr_class: general
  asmtemplate: 'ABS  <Wd>, <Wn>'
  feature: FEAT_CSSC
  asl:
    iformid: abs.xml
    iform: ABS 32-bit
    iclassid: iclass_general
    encoding_name: ABS_32_dp_1src
    decode_hier: dpreg.dp_1src
  usl: ~
  fix_encode:
    value: 0x5ac02000
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
abs_64_dp_1src:
  mnemonic: ABS
  instr_class: general
  asmtemplate: 'ABS  <Xd>, <Xn>'
  feature: FEAT_CSSC
  asl:
    iformid: abs.xml
    iform: ABS 64-bit
    iclassid: iclass_general
    encoding_name: ABS_64_dp_1src
    decode_hier: dpreg.dp_1src
  usl: ~
  fix_encode:
    value: 0xdac02000
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
abs_asimdmisc_r:
  mnemonic: ABS
  instr_class: advsimd
  asmtemplate: 'ABS  <Vd>.<T>, <Vn>.<T>'
  feature: ~
  asl:
    iformid: abs_advsimd.xml
    iform: ABS Vector
    iclassid: iclass_simd
    encoding_name: ABS_asimdmisc_R
    decode_hier: simd-dp.asimdmisc
  usl:
    flow: ABS_advsimd
    decoder: vx
    steering:
      - vx_any
  fix_encode:
    value: 0x0e20b800
    mask: 0xbf3ffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Q:
      hibit: 30
      width: 1
      encode: == x
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: cross
      constraints:
        - Q: 0
          boolean: eq
          label: 8B
          size: 00
        - Q: 1
          boolean: eq
          label: 16B
          size: 00
        - Q: 0
          boolean: eq
          label: 4H
          size: 01
        - Q: 1
          boolean: eq
          label: 8H
          size: 01
        - Q: 0
          boolean: eq
          label: 2S
          size: 10
        - Q: 1
          boolean: eq
          label: 4S
          size: 10
        - Q: 1
          boolean: eq
          label: 2D
          size: 11
  undef_constraint:
    - size:
        value: 0b00
        mask: 0b01
    - size:
        value: 0b00
        mask: 0b10
    - Q:
        value: 0b1
        mask: 0b1
  undef_debug_constraint: ~
abs_asisdmisc_r:
  mnemonic: ABS
  instr_class: advsimd
  asmtemplate: 'ABS  <V><d>, <V><n>'
  feature: ~
  asl:
    iformid: abs_advsimd.xml
    iform: ABS Scalar
    iclassid: iclass_sisd
    encoding_name: ABS_asisdmisc_R
    decode_hier: simd-dp.asisdmisc
  usl:
    flow: ABS_advsimd
    decoder: vx
    steering:
      - vx_any
  fix_encode:
    value: 0x5e20b800
    mask: 0xff3ffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_scalar_var
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_scalar_var
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    V:
      type: normal
      constraints:
        - boolean: eq
          label: D
          size: 11
  undef_constraint:
    - size:
        value: 0b11
        mask: 0b11
  undef_debug_constraint: ~
abs_z_p_z_:
  mnemonic: ABS
  instr_class: sve
  asmtemplate: 'ABS     <Zd>.<T>, <Pg>/M, <Zn>.<T>'
  feature: ~
  asl:
    iformid: abs_z_p_z.xml
    iform: ABS SVE
    iclassid: iclass_sve
    encoding_name: abs_z_p_z_
    decode_hier: sve.sve_int_pred_un.sve_int_un_pred_arit_0
  usl:
    flow: abs_z_p_z
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x0416a000
    mask: 0xff3fe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: []
  undef_debug_constraint: ~
adc_32_addsub_carry:
  mnemonic: ADC
  instr_class: general
  asmtemplate: 'ADC  <Wd>, <Wn>, <Wm>'
  feature: ~
  asl:
    iformid: adc.xml
    iform: ADC 32-bit
    iclassid: iclass_no_s
    encoding_name: ADC_32_addsub_carry
    decode_hier: dpreg.addsub_carry
  usl:
    flow: ADC
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x1a000000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
adc_64_addsub_carry:
  mnemonic: ADC
  instr_class: general
  asmtemplate: 'ADC  <Xd>, <Xn>, <Xm>'
  feature: ~
  asl:
    iformid: adc.xml
    iform: ADC 64-bit
    iclassid: iclass_no_s
    encoding_name: ADC_64_addsub_carry
    decode_hier: dpreg.addsub_carry
  usl:
    flow: ADC
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x9a000000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
adclb_z_zzz_:
  mnemonic: ADCLB
  instr_class: sve2
  asmtemplate: 'ADCLB   <Zda>.<T>, <Zn>.<T>, <Zm>.<T>'
  feature: ~
  asl:
    iformid: adclb_z_zzz.xml
    iform: ADCLB
    iclassid: iclass_sve2
    encoding_name: adclb_z_zzz_
    decode_hier: sve.sve_intx_acc.sve_intx_adc_long
  usl:
    flow: adclb_z_zzz
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x4500d000
    mask: 0xffa0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zda:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    sz:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: S
          sz: 0
        - boolean: eq
          label: D
          sz: 1
  undef_constraint: []
  undef_debug_constraint: ~
adclt_z_zzz_:
  mnemonic: ADCLT
  instr_class: sve2
  asmtemplate: 'ADCLT   <Zda>.<T>, <Zn>.<T>, <Zm>.<T>'
  feature: ~
  asl:
    iformid: adclt_z_zzz.xml
    iform: ADCLT
    iclassid: iclass_sve2
    encoding_name: adclt_z_zzz_
    decode_hier: sve.sve_intx_acc.sve_intx_adc_long
  usl:
    flow: adclt_z_zzz
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x4500d400
    mask: 0xffa0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zda:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    sz:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: S
          sz: 0
        - boolean: eq
          label: D
          sz: 1
  undef_constraint: []
  undef_debug_constraint: ~
adcs_32_addsub_carry:
  mnemonic: ADCS
  instr_class: general
  asmtemplate: 'ADCS  <Wd>, <Wn>, <Wm>'
  feature: ~
  asl:
    iformid: adcs.xml
    iform: ADCS 32-bit
    iclassid: iclass_s
    encoding_name: ADCS_32_addsub_carry
    decode_hier: dpreg.addsub_carry
  usl:
    flow: ADCS
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x3a000000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
adcs_64_addsub_carry:
  mnemonic: ADCS
  instr_class: general
  asmtemplate: 'ADCS  <Xd>, <Xn>, <Xm>'
  feature: ~
  asl:
    iformid: adcs.xml
    iform: ADCS 64-bit
    iclassid: iclass_s
    encoding_name: ADCS_64_addsub_carry
    decode_hier: dpreg.addsub_carry
  usl:
    flow: ADCS
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0xba000000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
add_32_addsub_ext:
  mnemonic: ADD
  instr_class: general
  asmtemplate: 'ADD  <Wd|WSP>, <Wn|WSP>, <Wm>{, <extend> {#<amount>}}'
  feature: ~
  asl:
    iformid: add_addsub_ext.xml
    iform: ADD (extended register) 32-bit
    iclassid: iclass_no_s
    encoding_name: ADD_32_addsub_ext
    decode_hier: dpreg.addsub_ext
  usl:
    flow: ADD_addsub_ext
    decoder: dp
    steering:
      - ix
      - mx
  fix_encode:
    value: 0x0b200000
    mask: 0xffe00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_32
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_32
        use: src
    imm3:
      hibit: 12
      width: 3
      encode: == xxx
    option:
      hibit: 15
      width: 3
      encode: == xxx
  constraint:
    extend:
      type: normal
      constraints:
        - boolean: eq
          label: UXTB
          option: 000
        - boolean: eq
          label: UXTH
          option: 001
        - boolean: eq
          label: LSL|UXTW
          option: 010
        - boolean: eq
          label: UXTX
          option: 011
        - boolean: eq
          label: SXTB
          option: 100
        - boolean: eq
          label: SXTH
          option: 101
        - boolean: eq
          label: SXTW
          option: 110
        - boolean: eq
          label: SXTX
          option: 111
    ps_imm3:
      type: normal
      constraints:
        - boolean: eq
          imm3: 000
          label: amount
        - boolean: eq
          imm3: 001
          label: amount
        - boolean: eq
          imm3: 010
          label: amount
        - boolean: eq
          imm3: 011
          label: amount
  undef_constraint:
    - imm3:
        value: 0b000
        mask: 0b011
    - imm3:
        value: 0b000
        mask: 0b100
  undef_debug_constraint: ~
add_32_addsub_imm:
  mnemonic: ADD
  instr_class: general
  asmtemplate: 'ADD  <Wd|WSP>, <Wn|WSP>, #<imm>{, <shift>}'
  feature: ~
  asl:
    iformid: add_addsub_imm.xml
    iform: ADD (immediate) 32-bit
    iclassid: iclass_no_s
    encoding_name: ADD_32_addsub_imm
    decode_hier: dpimm.addsub_imm
  usl:
    flow: ADD_addsub_imm
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x11000000
    mask: 0xff800000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_32
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_32
        use: src
    imm12:
      hibit: 21
      width: 12
      encode: == xxxxxxxxxxxx
    sh:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL0
          sh: 0
        - boolean: eq
          label: LSL12
          sh: 1
  undef_constraint: []
  undef_debug_constraint: []
add_32_addsub_shift:
  mnemonic: ADD
  instr_class: general
  asmtemplate: 'ADD  <Wd>, <Wn>, <Wm>{, <shift> #<amount>}'
  feature: ~
  asl:
    iformid: add_addsub_shift.xml
    iform: ADD (shifted register) 32-bit
    iclassid: iclass_no_s
    encoding_name: ADD_32_addsub_shift
    decode_hier: dpreg.addsub_shift
  usl:
    flow: ADD_addsub_shift
    decoder: dp
    steering:
      - ix
      - mx
  fix_encode:
    value: 0x0b000000
    mask: 0xff200000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    imm6:
      hibit: 15
      width: 6
      encode: == xxxxxx
    shift:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    ps_imm6:
      type: normal
      constraints:
        - boolean: eq
          imm6: 0xxxxx
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL
          shift: 00
        - boolean: eq
          label: LSR
          shift: 01
        - boolean: eq
          label: ASR
          shift: 10
  undef_constraint:
    - imm6:
        value: 0b000000
        mask: 0b100000
      shift:
        value: 0b00
        mask: 0b01
    - imm6:
        value: 0b000000
        mask: 0b100000
      shift:
        value: 0b00
        mask: 0b10
  undef_debug_constraint: ~
add_64_addsub_ext:
  mnemonic: ADD
  instr_class: general
  asmtemplate: 'ADD  <Xd|SP>, <Xn|SP>, <R><m>{, <extend> {#<amount>}}'
  feature: ~
  asl:
    iformid: add_addsub_ext.xml
    iform: ADD (extended register) 64-bit
    iclassid: iclass_no_s
    encoding_name: ADD_64_addsub_ext
    decode_hier: dpreg.addsub_ext
  usl:
    flow: ADD_addsub_ext
    decoder: dp
    steering:
      - ix
      - mx
  fix_encode:
    value: 0x8b200000
    mask: 0xffe00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_var
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    imm3:
      hibit: 12
      width: 3
      encode: == xxx
    option:
      hibit: 15
      width: 3
      encode: == xxx
  constraint:
    R:
      type: normal
      constraints:
        - boolean: eq
          label: W
          option: 00x
        - boolean: eq
          label: W
          option: 010
        - boolean: eq
          label: X
          option: x11
        - boolean: eq
          label: W
          option: 10x
        - boolean: eq
          label: W
          option: 110
    extend:
      type: normal
      constraints:
        - boolean: eq
          label: UXTB
          option: 000
        - boolean: eq
          label: UXTH
          option: 001
        - boolean: eq
          label: UXTW
          option: 010
        - boolean: eq
          label: LSL|UXTX
          option: 011
        - boolean: eq
          label: SXTB
          option: 100
        - boolean: eq
          label: SXTH
          option: 101
        - boolean: eq
          label: SXTW
          option: 110
        - boolean: eq
          label: SXTX
          option: 111
    ps_imm3:
      type: normal
      constraints:
        - boolean: eq
          imm3: 000
          label: amount
        - boolean: eq
          imm3: 001
          label: amount
        - boolean: eq
          imm3: 010
          label: amount
        - boolean: eq
          imm3: 011
          label: amount
  undef_constraint:
    - imm3:
        value: 0b000
        mask: 0b011
    - imm3:
        value: 0b000
        mask: 0b100
  undef_debug_constraint: ~
add_64_addsub_imm:
  mnemonic: ADD
  instr_class: general
  asmtemplate: 'ADD  <Xd|SP>, <Xn|SP>, #<imm>{, <shift>}'
  feature: ~
  asl:
    iformid: add_addsub_imm.xml
    iform: ADD (immediate) 64-bit
    iclassid: iclass_no_s
    encoding_name: ADD_64_addsub_imm
    decode_hier: dpimm.addsub_imm
  usl:
    flow: ADD_addsub_imm
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x91000000
    mask: 0xff800000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    imm12:
      hibit: 21
      width: 12
      encode: == xxxxxxxxxxxx
    sh:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL0
          sh: 0
        - boolean: eq
          label: LSL12
          sh: 1
  undef_constraint: []
  undef_debug_constraint: []
add_64_addsub_shift:
  mnemonic: ADD
  instr_class: general
  asmtemplate: 'ADD  <Xd>, <Xn>, <Xm>{, <shift> #<amount>}'
  feature: ~
  asl:
    iformid: add_addsub_shift.xml
    iform: ADD (shifted register) 64-bit
    iclassid: iclass_no_s
    encoding_name: ADD_64_addsub_shift
    decode_hier: dpreg.addsub_shift
  usl:
    flow: ADD_addsub_shift
    decoder: dp
    steering:
      - ix
      - mx
  fix_encode:
    value: 0x8b000000
    mask: 0xff200000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    imm6:
      hibit: 15
      width: 6
      encode: == xxxxxx
    shift:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL
          shift: 00
        - boolean: eq
          label: LSR
          shift: 01
        - boolean: eq
          label: ASR
          shift: 10
  undef_constraint:
    - shift:
        value: 0b00
        mask: 0b01
    - shift:
        value: 0b00
        mask: 0b10
  undef_debug_constraint: ~
add_asimdsame_only:
  mnemonic: ADD
  instr_class: advsimd
  asmtemplate: 'ADD  <Vd>.<T>, <Vn>.<T>, <Vm>.<T>'
  feature: ~
  asl:
    iformid: add_advsimd.xml
    iform: ADD (vector) Vector
    iclassid: iclass_simd
    encoding_name: ADD_asimdsame_only
    decode_hier: simd-dp.asimdsame
  usl:
    flow: ADD_advsimd
    decoder: vx
    steering:
      - vx_any
  fix_encode:
    value: 0x0e208400
    mask: 0xbf20fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Q:
      hibit: 30
      width: 1
      encode: == x
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: cross
      constraints:
        - Q: 0
          boolean: eq
          label: 8B
          size: 00
        - Q: 1
          boolean: eq
          label: 16B
          size: 00
        - Q: 0
          boolean: eq
          label: 4H
          size: 01
        - Q: 1
          boolean: eq
          label: 8H
          size: 01
        - Q: 0
          boolean: eq
          label: 2S
          size: 10
        - Q: 1
          boolean: eq
          label: 4S
          size: 10
        - Q: 1
          boolean: eq
          label: 2D
          size: 11
  undef_constraint:
    - size:
        value: 0b00
        mask: 0b01
    - size:
        value: 0b00
        mask: 0b10
    - Q:
        value: 0b1
        mask: 0b1
  undef_debug_constraint: ~
add_asisdsame_only:
  mnemonic: ADD
  instr_class: advsimd
  asmtemplate: 'ADD  <V><d>, <V><n>, <V><m>'
  feature: ~
  asl:
    iformid: add_advsimd.xml
    iform: ADD (vector) Scalar
    iclassid: iclass_sisd
    encoding_name: ADD_asisdsame_only
    decode_hier: simd-dp.asisdsame
  usl:
    flow: ADD_advsimd
    decoder: vx
    steering:
      - vx_any
  fix_encode:
    value: 0x5e208400
    mask: 0xff20fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_scalar_var
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_scalar_var
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_scalar_var
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    V:
      type: normal
      constraints:
        - boolean: eq
          label: D
          size: 11
  undef_constraint:
    - size:
        value: 0b11
        mask: 0b11
  undef_debug_constraint: ~
add_mz_zzv_2x1:
  mnemonic: ADD
  instr_class: mortlach2
  asmtemplate: 'ADD     { <Zdn1>.<T>-<Zdn2>.<T> }, { <Zdn1>.<T>-<Zdn2>.<T> }, <Zm>.<T>'
  feature: FEAT_SME2
  asl:
    iformid: add_mz_zzv.xml
    iform: ADD (to vector) Two registers
    iclassid: iclass_to_2reg
    encoding_name: add_mz_zzv_2x1
    decode_hier: sme.mortlach_multi_sve_2a.mortlach_multi2_z_z_add_sm
  usl: ~
  fix_encode:
    value: 0xc120a300
    mask: 0xff30ffe1
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 4
      encode: == xxxx
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: ~
  undef_debug_constraint: ~
add_mz_zzv_4x1:
  mnemonic: ADD
  instr_class: mortlach2
  asmtemplate: 'ADD     { <Zdn1>.<T>-<Zdn4>.<T> }, { <Zdn1>.<T>-<Zdn4>.<T> }, <Zm>.<T>'
  feature: FEAT_SME2
  asl:
    iformid: add_mz_zzv.xml
    iform: ADD (to vector) Four registers
    iclassid: iclass_to_4reg
    encoding_name: add_mz_zzv_4x1
    decode_hier: sme.mortlach_multi_sve_2b.mortlach_multi4_z_z_add_sm
  usl: ~
  fix_encode:
    value: 0xc120ab00
    mask: 0xff30ffe3
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 3
      encode: == xxx
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: ~
  undef_debug_constraint: ~
add_z_p_zz_:
  mnemonic: ADD
  instr_class: sve
  asmtemplate: 'ADD     <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>'
  feature: ~
  asl:
    iformid: add_z_p_zz.xml
    iform: 'ADD (vectors, predicated)'
    iclassid: iclass_sve
    encoding_name: add_z_p_zz_
    decode_hier: sve.sve_int_pred_bin.sve_int_bin_pred_arit_0
  usl:
    flow: add_z_p_zz
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x04000000
    mask: 0xff3fe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: []
  undef_debug_constraint: ~
add_z_zi_:
  mnemonic: ADD
  instr_class: sve
  asmtemplate: 'ADD     <Zdn>.<T>, <Zdn>.<T>, #<imm>{, <shift>}'
  feature: ~
  asl:
    iformid: add_z_zi.xml
    iform: ADD (immediate)
    iclassid: iclass_sve
    encoding_name: add_z_zi_
    decode_hier: sve.sve_wideimm_unpred.sve_int_arith_imm0
  usl:
    flow: add_z_zi
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x2520c000
    mask: 0xff3fc000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    imm8:
      hibit: 12
      width: 8
      encode: == xxxxxxxx
    sh:
      hibit: 13
      width: 1
      encode: == x
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
    ps_size_sh:
      type: cross
      constraints:
        - boolean: ne
          sh: 1
          size: 00
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL0
          sh: 0
        - boolean: eq
          label: LSL8
          sh: 1
  undef_constraint:
    - sh:
        value: 0b0
        mask: 0b1
    - size:
        value: 0b01
        mask: 0b01
    - size:
        value: 0b10
        mask: 0b10
  undef_debug_constraint: ~
add_z_zz_:
  mnemonic: ADD
  instr_class: sve
  asmtemplate: 'ADD     <Zd>.<T>, <Zn>.<T>, <Zm>.<T>'
  feature: ~
  asl:
    iformid: add_z_zz.xml
    iform: 'ADD (vectors, unpredicated)'
    iclassid: iclass_sve
    encoding_name: add_z_zz_
    decode_hier: sve.sve_int_bin_cons_arit_0
  usl:
    flow: add_z_zz
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x04200000
    mask: 0xff20fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: []
  undef_debug_constraint: ~
add_za_zw_2x2:
  mnemonic: ADD
  instr_class: mortlach2
  asmtemplate: 'ADD     ZA.<T>[<Wv>, <offs>{, VGx2}], { <Zm1>.<T>-<Zm2>.<T> }'
  feature: FEAT_SME2
  asl:
    iformid: add_za_zw.xml
    iform: ADD (array accumulators) Two ZA single-vectors
    iclassid: iclass_sme_vgx2_single
    encoding_name: add_za_zw_2x2
    decode_hier: sme.mortlach_multi_array_2a.mortlach_multi2_z_za_int_mm
  usl: ~
  fix_encode:
    value: 0xc1a01c10
    mask: 0xffbf9c38
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 9
      width: 4
      encode: == xxxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
    sz:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: S
          sz: 0
        - boolean: eq
          label: D
          sz: 1
  undef_constraint: ~
  undef_debug_constraint: ~
add_za_zw_4x4:
  mnemonic: ADD
  instr_class: mortlach2
  asmtemplate: 'ADD     ZA.<T>[<Wv>, <offs>{, VGx4}], { <Zm1>.<T>-<Zm4>.<T> }'
  feature: FEAT_SME2
  asl:
    iformid: add_za_zw.xml
    iform: ADD (array accumulators) Four ZA single-vectors
    iclassid: iclass_sme_vgx4_single
    encoding_name: add_za_zw_4x4
    decode_hier: sme.mortlach_multi_array_2b.mortlach_multi4_z_za_int_mm
  usl: ~
  fix_encode:
    value: 0xc1a11c10
    mask: 0xffbf9c78
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 9
      width: 3
      encode: == xxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
    sz:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: S
          sz: 0
        - boolean: eq
          label: D
          sz: 1
  undef_constraint: ~
  undef_debug_constraint: ~
add_za_zzv_2x1:
  mnemonic: ADD
  instr_class: mortlach2
  asmtemplate: 'ADD     ZA.<T>[<Wv>, <offs>{, VGx2}], { <Zn1>.<T>-<Zn2>.<T> }, <Zm>.<T>'
  feature: FEAT_SME2
  asl:
    iformid: add_za_zzv.xml
    iform: 'ADD (array results, multiple and single vector) Two ZA single-vectors'
    iclassid: iclass_sme_vgx2_single
    encoding_name: add_za_zzv_2x1
    decode_hier: sme.mortlach_multi_array_1a.mortlach_multi2_zz_za_int_sm
  usl: ~
  fix_encode:
    value: 0xc1201810
    mask: 0xffb09c18
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
    sz:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: S
          sz: 0
        - boolean: eq
          label: D
          sz: 1
  undef_constraint: ~
  undef_debug_constraint: ~
add_za_zzv_4x1:
  mnemonic: ADD
  instr_class: mortlach2
  asmtemplate: 'ADD     ZA.<T>[<Wv>, <offs>{, VGx4}], { <Zn1>.<T>-<Zn4>.<T> }, <Zm>.<T>'
  feature: FEAT_SME2
  asl:
    iformid: add_za_zzv.xml
    iform: 'ADD (array results, multiple and single vector) Four ZA single-vectors'
    iclassid: iclass_sme_vgx4_single
    encoding_name: add_za_zzv_4x1
    decode_hier: sme.mortlach_multi_array_1b.mortlach_multi4_zz_za_int_sm
  usl: ~
  fix_encode:
    value: 0xc1301810
    mask: 0xffb09c18
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
    sz:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: S
          sz: 0
        - boolean: eq
          label: D
          sz: 1
  undef_constraint: ~
  undef_debug_constraint: ~
add_za_zzw_2x2:
  mnemonic: ADD
  instr_class: mortlach2
  asmtemplate: 'ADD     ZA.<T>[<Wv>, <offs>{, VGx2}], { <Zn1>.<T>-<Zn2>.<T> }, { <Zm1>.<T>-<Zm2>.<T> }'
  feature: FEAT_SME2
  asl:
    iformid: add_za_zzw.xml
    iform: 'ADD (array results, multiple vectors) Two ZA single-vectors'
    iclassid: iclass_sme_vgx2_single
    encoding_name: add_za_zzw_2x2
    decode_hier: sme.mortlach_multi_array_2a.mortlach_multi2_zz_za_int_mm
  usl: ~
  fix_encode:
    value: 0xc1a01810
    mask: 0xffa19c38
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 20
      width: 4
      encode: == xxxx
    Zn:
      hibit: 9
      width: 4
      encode: == xxxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
    sz:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: S
          sz: 0
        - boolean: eq
          label: D
          sz: 1
  undef_constraint: ~
  undef_debug_constraint: ~
add_za_zzw_4x4:
  mnemonic: ADD
  instr_class: mortlach2
  asmtemplate: 'ADD     ZA.<T>[<Wv>, <offs>{, VGx4}], { <Zn1>.<T>-<Zn4>.<T> }, { <Zm1>.<T>-<Zm4>.<T> }'
  feature: FEAT_SME2
  asl:
    iformid: add_za_zzw.xml
    iform: 'ADD (array results, multiple vectors) Four ZA single-vectors'
    iclassid: iclass_sme_vgx4_single
    encoding_name: add_za_zzw_4x4
    decode_hier: sme.mortlach_multi_array_2b.mortlach_multi4_zz_za_int_mm
  usl: ~
  fix_encode:
    value: 0xc1a11810
    mask: 0xffa39c78
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 20
      width: 3
      encode: == xxx
    Zn:
      hibit: 9
      width: 3
      encode: == xxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
    sz:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: S
          sz: 0
        - boolean: eq
          label: D
          sz: 1
  undef_constraint: ~
  undef_debug_constraint: ~
addg_64_addsub_immtags:
  mnemonic: ADDG
  instr_class: general
  asmtemplate: 'ADDG  <Xd|SP>, <Xn|SP>, #<uimm6>, #<uimm4>'
  feature: FEAT_MTE
  asl:
    iformid: addg.xml
    iform: ADDG
    iclassid: iclass_general
    encoding_name: ADDG_64_addsub_immtags
    decode_hier: dpimm.addsub_immtags
  usl:
    flow: ADDG
    decoder: dp
    steering:
      - mx
  fix_encode:
    value: 0x91800000
    mask: 0xffc00000
    sb_value: 0x00000000
    sb_mask: 0x0000c000
  var_encode:
    Xd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: dst
    Xn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    uimm4:
      hibit: 13
      width: 4
      encode: == xxxx
    uimm6:
      hibit: 21
      width: 6
      encode: == xxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
addha_za_pp_z_32:
  mnemonic: ADDHA
  instr_class: mortlach
  asmtemplate: 'ADDHA   <ZAda>.S, <Pn>/M, <Pm>/M, <Zn>.S'
  feature: FEAT_SME
  asl:
    iformid: addha_za_pp_z.xml
    iform: ADDHA 32-bit
    iclassid: iclass_per_word
    encoding_name: addha_za_pp_z_32
    decode_hier: sme.mortlach_hvadd.mortlach_addhv
  usl: ~
  fix_encode:
    value: 0xc0900000
    mask: 0xffff001c
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pm:
      hibit: 15
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Pn:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    ZAda:
      hibit: 1
      width: 2
      encode: == xx
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
addha_za_pp_z_64:
  mnemonic: ADDHA
  instr_class: mortlach
  asmtemplate: 'ADDHA   <ZAda>.D, <Pn>/M, <Pm>/M, <Zn>.D'
  feature: FEAT_SME_I16I64
  asl:
    iformid: addha_za_pp_z.xml
    iform: ADDHA 64-bit
    iclassid: iclass_per_doubleword
    encoding_name: addha_za_pp_z_64
    decode_hier: sme.mortlach_hvadd.mortlach_addhv
  usl: ~
  fix_encode:
    value: 0xc0d00000
    mask: 0xffff0018
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pm:
      hibit: 15
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Pn:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    ZAda:
      hibit: 2
      width: 3
      encode: == xxx
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
addhn_asimddiff_n:
  mnemonic: ADDHN
  instr_class: advsimd
  asmtemplate: 'ADDHN{2}  <Vd>.<Tb>, <Vn>.<Ta>, <Vm>.<Ta>'
  feature: ~
  asl:
    iformid: addhn_advsimd.xml
    iform: 'ADDHN, ADDHN2'
    iclassid: iclass_3reg_diff
    encoding_name: ADDHN_asimddiff_N
    decode_hier: simd-dp.asimddiff
  usl:
    flow: ADDHN_advsimd
    decoder: vx
    steering:
      - vx_any
  fix_encode:
    value: 0x0e204000
    mask: 0xbf20fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Q:
      hibit: 30
      width: 1
      encode: == x
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    Ta:
      type: normal
      constraints:
        - boolean: eq
          label: 8H
          size: 00
        - boolean: eq
          label: 4S
          size: 01
        - boolean: eq
          label: 2D
          size: 10
    Tb:
      type: cross
      constraints:
        - Q: 0
          boolean: eq
          label: 8B
          size: 00
        - Q: 1
          boolean: eq
          label: 16B
          size: 00
        - Q: 0
          boolean: eq
          label: 4H
          size: 01
        - Q: 1
          boolean: eq
          label: 8H
          size: 01
        - Q: 0
          boolean: eq
          label: 2S
          size: 10
        - Q: 1
          boolean: eq
          label: 4S
          size: 10
  undef_constraint:
    - size:
        value: 0b00
        mask: 0b01
    - size:
        value: 0b00
        mask: 0b10
  undef_debug_constraint: ~
addhnb_z_zz_:
  mnemonic: ADDHNB
  instr_class: sve2
  asmtemplate: 'ADDHNB  <Zd>.<T>, <Zn>.<Tb>, <Zm>.<Tb>'
  feature: ~
  asl:
    iformid: addhnb_z_zz.xml
    iform: ADDHNB
    iclassid: iclass_sve2
    encoding_name: addhnb_z_zz_
    decode_hier: sve.sve_intx_narrowing.sve_intx_arith_narrow
  usl:
    flow: addhnb_z_zz
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x45206000
    mask: 0xff20fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 01
        - boolean: eq
          label: H
          size: 10
        - boolean: eq
          label: S
          size: 11
    Tb:
      type: normal
      constraints:
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint:
    - size:
        value: 0b01
        mask: 0b01
    - size:
        value: 0b10
        mask: 0b10
  undef_debug_constraint: ~
addhnt_z_zz_:
  mnemonic: ADDHNT
  instr_class: sve2
  asmtemplate: 'ADDHNT  <Zd>.<T>, <Zn>.<Tb>, <Zm>.<Tb>'
  feature: ~
  asl:
    iformid: addhnt_z_zz.xml
    iform: ADDHNT
    iclassid: iclass_sve2
    encoding_name: addhnt_z_zz_
    decode_hier: sve.sve_intx_narrowing.sve_intx_arith_narrow
  usl:
    flow: addhnt_z_zz
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x45206400
    mask: 0xff20fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 01
        - boolean: eq
          label: H
          size: 10
        - boolean: eq
          label: S
          size: 11
    Tb:
      type: normal
      constraints:
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint:
    - size:
        value: 0b01
        mask: 0b01
    - size:
        value: 0b10
        mask: 0b10
  undef_debug_constraint: ~
addp_asimdsame_only:
  mnemonic: ADDP
  instr_class: advsimd
  asmtemplate: 'ADDP  <Vd>.<T>, <Vn>.<T>, <Vm>.<T>'
  feature: ~
  asl:
    iformid: addp_advsimd_vec.xml
    iform: ADDP (vector)
    iclassid: iclass_3reg_same
    encoding_name: ADDP_asimdsame_only
    decode_hier: simd-dp.asimdsame
  usl:
    flow: ADDP_advsimd_vec
    decoder: vx
    steering:
      - vx_any
  fix_encode:
    value: 0x0e20bc00
    mask: 0xbf20fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Q:
      hibit: 30
      width: 1
      encode: == x
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: cross
      constraints:
        - Q: 0
          boolean: eq
          label: 8B
          size: 00
        - Q: 1
          boolean: eq
          label: 16B
          size: 00
        - Q: 0
          boolean: eq
          label: 4H
          size: 01
        - Q: 1
          boolean: eq
          label: 8H
          size: 01
        - Q: 0
          boolean: eq
          label: 2S
          size: 10
        - Q: 1
          boolean: eq
          label: 4S
          size: 10
        - Q: 1
          boolean: eq
          label: 2D
          size: 11
  undef_constraint:
    - size:
        value: 0b00
        mask: 0b01
    - size:
        value: 0b00
        mask: 0b10
    - Q:
        value: 0b1
        mask: 0b1
  undef_debug_constraint: ~
addp_asisdpair_only:
  mnemonic: ADDP
  instr_class: advsimd
  asmtemplate: 'ADDP  <V><d>, <Vn>.<T>'
  feature: ~
  asl:
    iformid: addp_advsimd_pair.xml
    iform: ADDP (scalar)
    iclassid: iclass_advsimd
    encoding_name: ADDP_asisdpair_only
    decode_hier: simd-dp.asisdpair
  usl:
    flow: ADDP_advsimd_pair
    decoder: vx
    steering:
      - vx_any
  fix_encode:
    value: 0x5e31b800
    mask: 0xff3ffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_scalar_var
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: 2D
          size: 11
    V:
      type: normal
      constraints:
        - boolean: eq
          label: D
          size: 11
  undef_constraint:
    - size:
        value: 0b11
        mask: 0b11
  undef_debug_constraint: ~
addp_z_p_zz_:
  mnemonic: ADDP
  instr_class: sve2
  asmtemplate: 'ADDP    <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>'
  feature: ~
  asl:
    iformid: addp_z_p_zz.xml
    iform: ADDP
    iclassid: iclass_sve2
    encoding_name: addp_z_p_zz_
    decode_hier: sve.sve_intx_predicated.sve_intx_arith_binary_pairs
  usl:
    flow: addp_z_p_zz
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x4411a000
    mask: 0xff3fe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: []
  undef_debug_constraint: ~
addpl_r_ri_:
  mnemonic: ADDPL
  instr_class: sve
  asmtemplate: 'ADDPL   <Xd|SP>, <Xn|SP>, #<imm>'
  feature: ~
  asl:
    iformid: addpl_r_ri.xml
    iform: ADDPL
    iclassid: iclass_sve
    encoding_name: addpl_r_ri_
    decode_hier: sve.sve_alloca.sve_int_arith_vl
  usl:
    flow: addpl_r_ri
    decoder: sve
    steering:
      - ix
  fix_encode:
    value: 0x04605000
    mask: 0xffe0f800
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src_dst
    Rn:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    imm6:
      hibit: 10
      width: 6
      encode: == xxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
addqv_z_p_z_:
  mnemonic: ADDQV
  instr_class: sve2
  asmtemplate: 'ADDQV   <Vd>.<T>, <Pg>, <Zn>.<Tb>'
  feature: FEAT_SVE2p1
  asl:
    iformid: addqv_z_p_z.xml
    iform: ADDQV
    iclassid: iclass_sve2
    encoding_name: addqv_z_p_z_
    decode_hier: sve.sve_int_pred_red.sve_int_reduce_0q
  usl: ~
  fix_encode:
    value: 0x04052000
    mask: 0xff3fe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Vd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_scalar_var
        use: dst
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: 16B
          size: 00
        - boolean: eq
          label: 8H
          size: 01
        - boolean: eq
          label: 4S
          size: 10
        - boolean: eq
          label: 2D
          size: 11
    Tb:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: ~
  undef_debug_constraint: ~
adds_32_addsub_shift:
  mnemonic: ADDS
  instr_class: general
  asmtemplate: 'ADDS  <Wd>, <Wn>, <Wm>{, <shift> #<amount>}'
  feature: ~
  asl:
    iformid: adds_addsub_shift.xml
    iform: ADDS (shifted register) 32-bit
    iclassid: iclass_s
    encoding_name: ADDS_32_addsub_shift
    decode_hier: dpreg.addsub_shift
  usl:
    flow: ADDS_addsub_shift
    decoder: dp
    steering:
      - bx
      - ix
      - mx
  fix_encode:
    value: 0x2b000000
    mask: 0xff200000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    imm6:
      hibit: 15
      width: 6
      encode: == xxxxxx
    shift:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    ps_imm6:
      type: normal
      constraints:
        - boolean: eq
          imm6: 0xxxxx
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL
          shift: 00
        - boolean: eq
          label: LSR
          shift: 01
        - boolean: eq
          label: ASR
          shift: 10
  undef_constraint:
    - imm6:
        value: 0b000000
        mask: 0b100000
      shift:
        value: 0b00
        mask: 0b01
    - imm6:
        value: 0b000000
        mask: 0b100000
      shift:
        value: 0b00
        mask: 0b10
  undef_debug_constraint: ~
adds_32s_addsub_ext:
  mnemonic: ADDS
  instr_class: general
  asmtemplate: 'ADDS  <Wd>, <Wn|WSP>, <Wm>{, <extend> {#<amount>}}'
  feature: ~
  asl:
    iformid: adds_addsub_ext.xml
    iform: ADDS (extended register) 32-bit
    iclassid: iclass_s
    encoding_name: ADDS_32S_addsub_ext
    decode_hier: dpreg.addsub_ext
  usl:
    flow: ADDS_addsub_ext
    decoder: dp
    steering:
      - bx
      - ix
      - mx
  fix_encode:
    value: 0x2b200000
    mask: 0xffe00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_32
        use: src
    imm3:
      hibit: 12
      width: 3
      encode: == xxx
    option:
      hibit: 15
      width: 3
      encode: == xxx
  constraint:
    extend:
      type: normal
      constraints:
        - boolean: eq
          label: UXTB
          option: 000
        - boolean: eq
          label: UXTH
          option: 001
        - boolean: eq
          label: LSL|UXTW
          option: 010
        - boolean: eq
          label: UXTX
          option: 011
        - boolean: eq
          label: SXTB
          option: 100
        - boolean: eq
          label: SXTH
          option: 101
        - boolean: eq
          label: SXTW
          option: 110
        - boolean: eq
          label: SXTX
          option: 111
    ps_imm3:
      type: normal
      constraints:
        - boolean: eq
          imm3: 000
          label: amount
        - boolean: eq
          imm3: 001
          label: amount
        - boolean: eq
          imm3: 010
          label: amount
        - boolean: eq
          imm3: 011
          label: amount
  undef_constraint:
    - imm3:
        value: 0b000
        mask: 0b011
    - imm3:
        value: 0b000
        mask: 0b100
  undef_debug_constraint: ~
adds_32s_addsub_imm:
  mnemonic: ADDS
  instr_class: general
  asmtemplate: 'ADDS  <Wd>, <Wn|WSP>, #<imm>{, <shift>}'
  feature: ~
  asl:
    iformid: adds_addsub_imm.xml
    iform: ADDS (immediate) 32-bit
    iclassid: iclass_s
    encoding_name: ADDS_32S_addsub_imm
    decode_hier: dpimm.addsub_imm
  usl:
    flow: ADDS_addsub_imm
    decoder: dp
    steering:
      - bx
      - ix
  fix_encode:
    value: 0x31000000
    mask: 0xff800000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_32
        use: src
    imm12:
      hibit: 21
      width: 12
      encode: == xxxxxxxxxxxx
    sh:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL0
          sh: 0
        - boolean: eq
          label: LSL12
          sh: 1
  undef_constraint: []
  undef_debug_constraint: ~
adds_64_addsub_shift:
  mnemonic: ADDS
  instr_class: general
  asmtemplate: 'ADDS  <Xd>, <Xn>, <Xm>{, <shift> #<amount>}'
  feature: ~
  asl:
    iformid: adds_addsub_shift.xml
    iform: ADDS (shifted register) 64-bit
    iclassid: iclass_s
    encoding_name: ADDS_64_addsub_shift
    decode_hier: dpreg.addsub_shift
  usl:
    flow: ADDS_addsub_shift
    decoder: dp
    steering:
      - bx
      - ix
      - mx
  fix_encode:
    value: 0xab000000
    mask: 0xff200000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    imm6:
      hibit: 15
      width: 6
      encode: == xxxxxx
    shift:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL
          shift: 00
        - boolean: eq
          label: LSR
          shift: 01
        - boolean: eq
          label: ASR
          shift: 10
  undef_constraint:
    - shift:
        value: 0b00
        mask: 0b01
    - shift:
        value: 0b00
        mask: 0b10
  undef_debug_constraint: ~
adds_64s_addsub_ext:
  mnemonic: ADDS
  instr_class: general
  asmtemplate: 'ADDS  <Xd>, <Xn|SP>, <R><m>{, <extend> {#<amount>}}'
  feature: ~
  asl:
    iformid: adds_addsub_ext.xml
    iform: ADDS (extended register) 64-bit
    iclassid: iclass_s
    encoding_name: ADDS_64S_addsub_ext
    decode_hier: dpreg.addsub_ext
  usl:
    flow: ADDS_addsub_ext
    decoder: dp
    steering:
      - bx
      - ix
      - mx
  fix_encode:
    value: 0xab200000
    mask: 0xffe00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_var
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    imm3:
      hibit: 12
      width: 3
      encode: == xxx
    option:
      hibit: 15
      width: 3
      encode: == xxx
  constraint:
    R:
      type: normal
      constraints:
        - boolean: eq
          label: W
          option: 00x
        - boolean: eq
          label: W
          option: 010
        - boolean: eq
          label: X
          option: x11
        - boolean: eq
          label: W
          option: 10x
        - boolean: eq
          label: W
          option: 110
    extend:
      type: normal
      constraints:
        - boolean: eq
          label: UXTB
          option: 000
        - boolean: eq
          label: UXTH
          option: 001
        - boolean: eq
          label: UXTW
          option: 010
        - boolean: eq
          label: LSL|UXTX
          option: 011
        - boolean: eq
          label: SXTB
          option: 100
        - boolean: eq
          label: SXTH
          option: 101
        - boolean: eq
          label: SXTW
          option: 110
        - boolean: eq
          label: SXTX
          option: 111
    ps_imm3:
      type: normal
      constraints:
        - boolean: eq
          imm3: 000
          label: amount
        - boolean: eq
          imm3: 001
          label: amount
        - boolean: eq
          imm3: 010
          label: amount
        - boolean: eq
          imm3: 011
          label: amount
  undef_constraint:
    - imm3:
        value: 0b000
        mask: 0b011
    - imm3:
        value: 0b000
        mask: 0b100
  undef_debug_constraint: ~
adds_64s_addsub_imm:
  mnemonic: ADDS
  instr_class: general
  asmtemplate: 'ADDS  <Xd>, <Xn|SP>, #<imm>{, <shift>}'
  feature: ~
  asl:
    iformid: adds_addsub_imm.xml
    iform: ADDS (immediate) 64-bit
    iclassid: iclass_s
    encoding_name: ADDS_64S_addsub_imm
    decode_hier: dpimm.addsub_imm
  usl:
    flow: ADDS_addsub_imm
    decoder: dp
    steering:
      - bx
      - ix
  fix_encode:
    value: 0xb1000000
    mask: 0xff800000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    imm12:
      hibit: 21
      width: 12
      encode: == xxxxxxxxxxxx
    sh:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL0
          sh: 0
        - boolean: eq
          label: LSL12
          sh: 1
  undef_constraint: []
  undef_debug_constraint: ~
addspl_r_ri_:
  mnemonic: ADDSPL
  instr_class: mortlach
  asmtemplate: 'ADDSPL  <Xd|SP>, <Xn|SP>, #<imm>'
  feature: FEAT_SME
  asl:
    iformid: addspl_r_ri.xml
    iform: ADDSPL
    iclassid: iclass_mortlach
    encoding_name: addspl_r_ri_
    decode_hier: sve.sve_alloca.sve_int_arith_svl
  usl: ~
  fix_encode:
    value: 0x04605800
    mask: 0xffe0f800
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    Rn:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    imm6:
      hibit: 10
      width: 6
      encode: == xxxxxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
addsvl_r_ri_:
  mnemonic: ADDSVL
  instr_class: mortlach
  asmtemplate: 'ADDSVL  <Xd|SP>, <Xn|SP>, #<imm>'
  feature: FEAT_SME
  asl:
    iformid: addsvl_r_ri.xml
    iform: ADDSVL
    iclassid: iclass_mortlach
    encoding_name: addsvl_r_ri_
    decode_hier: sve.sve_alloca.sve_int_arith_svl
  usl: ~
  fix_encode:
    value: 0x04205800
    mask: 0xffe0f800
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    Rn:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    imm6:
      hibit: 10
      width: 6
      encode: == xxxxxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
addv_asimdall_only:
  mnemonic: ADDV
  instr_class: advsimd
  asmtemplate: 'ADDV  <V><d>, <Vn>.<T>'
  feature: ~
  asl:
    iformid: addv_advsimd.xml
    iform: ADDV
    iclassid: iclass_advsimd
    encoding_name: ADDV_asimdall_only
    decode_hier: simd-dp.asimdall
  usl:
    flow: ADDV_advsimd
    decoder: vx
    steering:
      - vx_int_reduce
      - vx_any
  fix_encode:
    value: 0x0e31b800
    mask: 0xbf3ffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Q:
      hibit: 30
      width: 1
      encode: == x
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_scalar_var
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: cross
      constraints:
        - Q: 0
          boolean: eq
          label: 8B
          size: 00
        - Q: 1
          boolean: eq
          label: 16B
          size: 00
        - Q: 0
          boolean: eq
          label: 4H
          size: 01
        - Q: 1
          boolean: eq
          label: 8H
          size: 01
        - Q: 1
          boolean: eq
          label: 4S
          size: 10
    V:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
  undef_constraint:
    - size:
        value: 0b00
        mask: 0b10
    - Q:
        value: 0b1
        mask: 0b1
      size:
        value: 0b00
        mask: 0b01
  undef_debug_constraint: ~
addva_za_pp_z_32:
  mnemonic: ADDVA
  instr_class: mortlach
  asmtemplate: 'ADDVA   <ZAda>.S, <Pn>/M, <Pm>/M, <Zn>.S'
  feature: FEAT_SME
  asl:
    iformid: addva_za_pp_z.xml
    iform: ADDVA 32-bit
    iclassid: iclass_per_word
    encoding_name: addva_za_pp_z_32
    decode_hier: sme.mortlach_hvadd.mortlach_addhv
  usl: ~
  fix_encode:
    value: 0xc0910000
    mask: 0xffff001c
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pm:
      hibit: 15
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Pn:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    ZAda:
      hibit: 1
      width: 2
      encode: == xx
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
addva_za_pp_z_64:
  mnemonic: ADDVA
  instr_class: mortlach
  asmtemplate: 'ADDVA   <ZAda>.D, <Pn>/M, <Pm>/M, <Zn>.D'
  feature: FEAT_SME_I16I64
  asl:
    iformid: addva_za_pp_z.xml
    iform: ADDVA 64-bit
    iclassid: iclass_per_doubleword
    encoding_name: addva_za_pp_z_64
    decode_hier: sme.mortlach_hvadd.mortlach_addhv
  usl: ~
  fix_encode:
    value: 0xc0d10000
    mask: 0xffff0018
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pm:
      hibit: 15
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Pn:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    ZAda:
      hibit: 2
      width: 3
      encode: == xxx
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
addvl_r_ri_:
  mnemonic: ADDVL
  instr_class: sve
  asmtemplate: 'ADDVL   <Xd|SP>, <Xn|SP>, #<imm>'
  feature: ~
  asl:
    iformid: addvl_r_ri.xml
    iform: ADDVL
    iclassid: iclass_sve
    encoding_name: addvl_r_ri_
    decode_hier: sve.sve_alloca.sve_int_arith_vl
  usl:
    flow: addvl_r_ri
    decoder: sve
    steering:
      - ix
  fix_encode:
    value: 0x04205000
    mask: 0xffe0f800
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src_dst
    Rn:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    imm6:
      hibit: 10
      width: 6
      encode: == xxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
adr_only_pcreladdr:
  mnemonic: ADR
  instr_class: general
  asmtemplate: 'ADR  <Xd>, <label>'
  feature: ~
  asl:
    iformid: adr.xml
    iform: ADR
    iclassid: iclass_literal
    encoding_name: ADR_only_pcreladdr
    decode_hier: dpimm.pcreladdr
  usl:
    flow: ADR
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x10000000
    mask: 0x9f000000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    immhi:
      hibit: 23
      width: 19
      encode: == xxxxxxxxxxxxxxxxxxx
    immlo:
      hibit: 30
      width: 2
      encode: == xx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
adr_z_az_d_s32_scaled:
  mnemonic: ADR
  instr_class: sve
  asmtemplate: 'ADR     <Zd>.D, [<Zn>.D, <Zm>.D, SXTW{ <amount>}]'
  feature: ~
  asl:
    iformid: adr_z_az.xml
    iform: ADR Unpacked 32-bit signed offsets
    iclassid: iclass_off_s_s32
    encoding_name: adr_z_az_d_s32_scaled
    decode_hier: sve.sve_int_bin_cons_misc_0_a
  usl:
    flow: adr_z_az
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x0420a000
    mask: 0xffe0f000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    msz:
      hibit: 11
      width: 2
      encode: == xx
  constraint:
    amount:
      type: normal
      constraints:
        - boolean: eq
          label: absent
          msz: 00
        - boolean: eq
          label: 1
          msz: 01
        - boolean: eq
          label: 2
          msz: 10
        - boolean: eq
          label: 3
          msz: 11
  undef_constraint: []
  undef_debug_constraint: ~
adr_z_az_d_u32_scaled:
  mnemonic: ADR
  instr_class: sve
  asmtemplate: 'ADR     <Zd>.D, [<Zn>.D, <Zm>.D, UXTW{ <amount>}]'
  feature: ~
  asl:
    iformid: adr_z_az.xml
    iform: ADR Unpacked 32-bit unsigned offsets
    iclassid: iclass_off_s_u32
    encoding_name: adr_z_az_d_u32_scaled
    decode_hier: sve.sve_int_bin_cons_misc_0_a
  usl:
    flow: adr_z_az
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x0460a000
    mask: 0xffe0f000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    msz:
      hibit: 11
      width: 2
      encode: == xx
  constraint:
    amount:
      type: normal
      constraints:
        - boolean: eq
          label: absent
          msz: 00
        - boolean: eq
          label: 1
          msz: 01
        - boolean: eq
          label: 2
          msz: 10
        - boolean: eq
          label: 3
          msz: 11
  undef_constraint: []
  undef_debug_constraint: ~
adr_z_az_sd_same_scaled:
  mnemonic: ADR
  instr_class: sve
  asmtemplate: 'ADR     <Zd>.<T>, [<Zn>.<T>, <Zm>.<T>{, <mod> <amount>}]'
  feature: ~
  asl:
    iformid: adr_z_az.xml
    iform: ADR Packed offsets
    iclassid: iclass_off_pkd
    encoding_name: adr_z_az_sd_same_scaled
    decode_hier: sve.sve_int_bin_cons_misc_0_a
  usl:
    flow: adr_z_az
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x04a0a000
    mask: 0xffa0f000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    msz:
      hibit: 11
      width: 2
      encode: == xx
    sz:
      hibit: 22
      width: 1
      encode: == x
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: S
          sz: 0
        - boolean: eq
          label: D
          sz: 1
    amount:
      type: normal
      constraints:
        - boolean: eq
          label: absent
          msz: 00
        - boolean: eq
          label: 1
          msz: 01
        - boolean: eq
          label: 2
          msz: 10
        - boolean: eq
          label: 3
          msz: 11
    mod:
      type: normal
      constraints:
        - boolean: eq
          label: absent
          msz: 00
        - boolean: eq
          label: LSL
          msz: x1
        - boolean: eq
          label: LSL
          msz: 10
  undef_constraint: []
  undef_debug_constraint: ~
adrp_only_pcreladdr:
  mnemonic: ADRP
  instr_class: general
  asmtemplate: 'ADRP  <Xd>, <label>'
  feature: ~
  asl:
    iformid: adrp.xml
    iform: ADRP
    iclassid: iclass_literal
    encoding_name: ADRP_only_pcreladdr
    decode_hier: dpimm.pcreladdr
  usl:
    flow: ADRP
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x90000000
    mask: 0x9f000000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    immhi:
      hibit: 23
      width: 19
      encode: == xxxxxxxxxxxxxxxxxxx
    immlo:
      hibit: 30
      width: 2
      encode: == xx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
aesd_b_cryptoaes:
  mnemonic: AESD
  instr_class: advsimd
  asmtemplate: 'AESD  <Vd>.16B, <Vn>.16B'
  feature: FEAT_AES
  asl:
    iformid: aesd_advsimd.xml
    iform: AESD SIMD
    iclassid: iclass_advsimd
    encoding_name: AESD_B_cryptoaes
    decode_hier: simd-dp.cryptoaes
  usl:
    flow: AESD_advsimd
    decoder: vx
    steering:
      - vx_aes
  fix_encode:
    value: 0x4e285800
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
aesd_z_zz_:
  mnemonic: AESD
  instr_class: sve2
  asmtemplate: 'AESD    <Zdn>.B, <Zdn>.B, <Zm>.B'
  feature: FEAT_SVE_AES
  asl:
    iformid: aesd_z_zz.xml
    iform: AESD SVE
    iclassid: iclass_sve2
    encoding_name: aesd_z_zz_
    decode_hier: sve.sve_intx_crypto.sve_crypto_binary_dest
  usl:
    flow: aesd_z_zz
    decoder: sve
    steering:
      - vx_aes
  fix_encode:
    value: 0x4522e400
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
aese_b_cryptoaes:
  mnemonic: AESE
  instr_class: advsimd
  asmtemplate: 'AESE  <Vd>.16B, <Vn>.16B'
  feature: FEAT_AES
  asl:
    iformid: aese_advsimd.xml
    iform: AESE SIMD
    iclassid: iclass_advsimd
    encoding_name: AESE_B_cryptoaes
    decode_hier: simd-dp.cryptoaes
  usl:
    flow: AESE_advsimd
    decoder: vx
    steering:
      - vx_aes
  fix_encode:
    value: 0x4e284800
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
aese_z_zz_:
  mnemonic: AESE
  instr_class: sve2
  asmtemplate: 'AESE    <Zdn>.B, <Zdn>.B, <Zm>.B'
  feature: FEAT_SVE_AES
  asl:
    iformid: aese_z_zz.xml
    iform: AESE SVE
    iclassid: iclass_sve2
    encoding_name: aese_z_zz_
    decode_hier: sve.sve_intx_crypto.sve_crypto_binary_dest
  usl:
    flow: aese_z_zz
    decoder: sve
    steering:
      - vx_aes
  fix_encode:
    value: 0x4522e000
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
aesimc_b_cryptoaes:
  mnemonic: AESIMC
  instr_class: advsimd
  asmtemplate: 'AESIMC  <Vd>.16B, <Vn>.16B'
  feature: FEAT_AES
  asl:
    iformid: aesimc_advsimd.xml
    iform: AESIMC SIMD
    iclassid: iclass_advsimd
    encoding_name: AESIMC_B_cryptoaes
    decode_hier: simd-dp.cryptoaes
  usl:
    flow: AESIMC_advsimd
    decoder: vx
    steering:
      - vx_aes
  fix_encode:
    value: 0x4e287800
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
aesimc_z_z_:
  mnemonic: AESIMC
  instr_class: sve2
  asmtemplate: 'AESIMC  <Zdn>.B, <Zdn>.B'
  feature: FEAT_SVE_AES
  asl:
    iformid: aesimc_z_z.xml
    iform: AESIMC SVE
    iclassid: iclass_sve2
    encoding_name: aesimc_z_z_
    decode_hier: sve.sve_intx_crypto.sve_crypto_unary
  usl:
    flow: aesimc_z_z
    decoder: sve
    steering:
      - vx_aes
  fix_encode:
    value: 0x4520e400
    mask: 0xffffffe0
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
aesmc_b_cryptoaes:
  mnemonic: AESMC
  instr_class: advsimd
  asmtemplate: 'AESMC  <Vd>.16B, <Vn>.16B'
  feature: FEAT_AES
  asl:
    iformid: aesmc_advsimd.xml
    iform: AESMC SIMD
    iclassid: iclass_advsimd
    encoding_name: AESMC_B_cryptoaes
    decode_hier: simd-dp.cryptoaes
  usl:
    flow: AESMC_advsimd
    decoder: vx
    steering:
      - vx_aes
  fix_encode:
    value: 0x4e286800
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
aesmc_z_z_:
  mnemonic: AESMC
  instr_class: sve2
  asmtemplate: 'AESMC   <Zdn>.B, <Zdn>.B'
  feature: FEAT_SVE_AES
  asl:
    iformid: aesmc_z_z.xml
    iform: AESMC SVE
    iclassid: iclass_sve2
    encoding_name: aesmc_z_z_
    decode_hier: sve.sve_intx_crypto.sve_crypto_unary
  usl:
    flow: aesmc_z_z
    decoder: sve
    steering:
      - vx_aes
  fix_encode:
    value: 0x4520e000
    mask: 0xffffffe0
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
and_32_log_imm:
  mnemonic: AND
  instr_class: general
  asmtemplate: 'AND  <Wd|WSP>, <Wn>, #<imm>'
  feature: ~
  asl:
    iformid: and_log_imm.xml
    iform: AND (immediate) 32-bit
    iclassid: iclass_no_s
    encoding_name: AND_32_log_imm
    decode_hier: dpimm.log_imm
  usl:
    flow: AND_log_imm
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x12000000
    mask: 0xffc00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_32
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    immr:
      hibit: 21
      width: 6
      encode: == xxxxxx
    imms:
      hibit: 15
      width: 6
      encode: == xxxxxx
  constraint: {}
  undef_constraint:
    - imms:
        value: 0b000000
        mask: 0b000011
    - imms:
        value: 0b000000
        mask: 0b000101
    - imms:
        value: 0b000000
        mask: 0b000110
    - imms:
        value: 0b000000
        mask: 0b001001
    - imms:
        value: 0b000000
        mask: 0b001010
    - imms:
        value: 0b000000
        mask: 0b001100
    - imms:
        value: 0b000000
        mask: 0b010001
    - imms:
        value: 0b000000
        mask: 0b010010
    - imms:
        value: 0b000000
        mask: 0b010100
    - imms:
        value: 0b000000
        mask: 0b011000
    - imms:
        value: 0b000000
        mask: 0b100001
    - imms:
        value: 0b000000
        mask: 0b100010
    - imms:
        value: 0b000000
        mask: 0b100100
    - imms:
        value: 0b000000
        mask: 0b101000
    - imms:
        value: 0b000000
        mask: 0b110000
  undef_debug_constraint: ~
and_32_log_shift:
  mnemonic: AND
  instr_class: general
  asmtemplate: 'AND  <Wd>, <Wn>, <Wm>{, <shift> #<amount>}'
  feature: ~
  asl:
    iformid: and_log_shift.xml
    iform: AND (shifted register) 32-bit
    iclassid: iclass_no_s
    encoding_name: AND_32_log_shift
    decode_hier: dpreg.log_shift
  usl:
    flow: AND_log_shift
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x0a000000
    mask: 0xff200000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    imm6:
      hibit: 15
      width: 6
      encode: == xxxxxx
    shift:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    ps_imm6:
      type: normal
      constraints:
        - boolean: eq
          imm6: 0xxxxx
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL
          shift: 00
        - boolean: eq
          label: LSR
          shift: 01
        - boolean: eq
          label: ASR
          shift: 10
        - boolean: eq
          label: ROR
          shift: 11
  undef_constraint:
    - imm6:
        value: 0b000000
        mask: 0b100000
  undef_debug_constraint: ~
and_64_log_imm:
  mnemonic: AND
  instr_class: general
  asmtemplate: 'AND  <Xd|SP>, <Xn>, #<imm>'
  feature: ~
  asl:
    iformid: and_log_imm.xml
    iform: AND (immediate) 64-bit
    iclassid: iclass_no_s
    encoding_name: AND_64_log_imm
    decode_hier: dpimm.log_imm
  usl:
    flow: AND_log_imm
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x92000000
    mask: 0xff800000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    N:
      hibit: 22
      width: 1
      encode: == x
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    immr:
      hibit: 21
      width: 6
      encode: == xxxxxx
    imms:
      hibit: 15
      width: 6
      encode: == xxxxxx
  constraint: {}
  undef_constraint:
    - imms:
        value: 0b000000
        mask: 0b000011
    - imms:
        value: 0b000000
        mask: 0b000101
    - imms:
        value: 0b000000
        mask: 0b000110
    - imms:
        value: 0b000000
        mask: 0b001001
    - imms:
        value: 0b000000
        mask: 0b001010
    - imms:
        value: 0b000000
        mask: 0b001100
    - imms:
        value: 0b000000
        mask: 0b010001
    - imms:
        value: 0b000000
        mask: 0b010010
    - imms:
        value: 0b000000
        mask: 0b010100
    - imms:
        value: 0b000000
        mask: 0b011000
    - imms:
        value: 0b000000
        mask: 0b100001
    - imms:
        value: 0b000000
        mask: 0b100010
    - imms:
        value: 0b000000
        mask: 0b100100
    - imms:
        value: 0b000000
        mask: 0b101000
    - imms:
        value: 0b000000
        mask: 0b110000
    - N:
        value: 0b1
        mask: 0b1
      imms:
        value: 0b000000
        mask: 0b000001
    - N:
        value: 0b1
        mask: 0b1
      imms:
        value: 0b000000
        mask: 0b000010
    - N:
        value: 0b1
        mask: 0b1
      imms:
        value: 0b000000
        mask: 0b000100
    - N:
        value: 0b1
        mask: 0b1
      imms:
        value: 0b000000
        mask: 0b001000
    - N:
        value: 0b1
        mask: 0b1
      imms:
        value: 0b000000
        mask: 0b010000
    - N:
        value: 0b1
        mask: 0b1
      imms:
        value: 0b000000
        mask: 0b100000
  undef_debug_constraint: ~
and_64_log_shift:
  mnemonic: AND
  instr_class: general
  asmtemplate: 'AND  <Xd>, <Xn>, <Xm>{, <shift> #<amount>}'
  feature: ~
  asl:
    iformid: and_log_shift.xml
    iform: AND (shifted register) 64-bit
    iclassid: iclass_no_s
    encoding_name: AND_64_log_shift
    decode_hier: dpreg.log_shift
  usl:
    flow: AND_log_shift
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x8a000000
    mask: 0xff200000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    imm6:
      hibit: 15
      width: 6
      encode: == xxxxxx
    shift:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL
          shift: 00
        - boolean: eq
          label: LSR
          shift: 01
        - boolean: eq
          label: ASR
          shift: 10
        - boolean: eq
          label: ROR
          shift: 11
  undef_constraint: []
  undef_debug_constraint: ~
and_asimdsame_only:
  mnemonic: AND
  instr_class: advsimd
  asmtemplate: 'AND  <Vd>.<T>, <Vn>.<T>, <Vm>.<T>'
  feature: ~
  asl:
    iformid: and_advsimd.xml
    iform: AND (vector)
    iclassid: iclass_3reg_same
    encoding_name: AND_asimdsame_only
    decode_hier: simd-dp.asimdsame
  usl:
    flow: AND_advsimd
    decoder: vx
    steering:
      - vx_any
  fix_encode:
    value: 0x0e201c00
    mask: 0xbfe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Q:
      hibit: 30
      width: 1
      encode: == x
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint:
    T:
      type: normal
      constraints:
        - Q: 0
          boolean: eq
          label: 8B
        - Q: 1
          boolean: eq
          label: 16B
  undef_constraint: []
  undef_debug_constraint: ~
and_p_p_pp_z:
  mnemonic: AND
  instr_class: sve
  asmtemplate: 'AND     <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B'
  feature: ~
  asl:
    iformid: and_p_p_pp.xml
    iform: AND (predicates)
    iclassid: iclass_no_s
    encoding_name: and_p_p_pp_z
    decode_hier: sve.sve_int_pred_log
  usl:
    flow: and_p_p_pp
    decoder: sve
    steering:
      - mx_pred
  fix_encode:
    value: 0x25004000
    mask: 0xfff0c210
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pd:
      hibit: 3
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: dst
    Pg:
      hibit: 13
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Pm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Pn:
      hibit: 8
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
and_z_p_zz_:
  mnemonic: AND
  instr_class: sve
  asmtemplate: 'AND     <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>'
  feature: ~
  asl:
    iformid: and_z_p_zz.xml
    iform: 'AND (vectors, predicated)'
    iclassid: iclass_sve
    encoding_name: and_z_p_zz_
    decode_hier: sve.sve_int_pred_bin.sve_int_bin_pred_log
  usl:
    flow: and_z_p_zz
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x041a0000
    mask: 0xff3fe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: []
  undef_debug_constraint: ~
and_z_zi_:
  mnemonic: AND
  instr_class: sve
  asmtemplate: 'AND     <Zdn>.<T>, <Zdn>.<T>, #<const>'
  feature: ~
  asl:
    iformid: and_z_zi.xml
    iform: AND (immediate)
    iclassid: iclass_sve
    encoding_name: and_z_zi_
    decode_hier: sve.sve_maskimm.sve_int_log_imm
  usl:
    flow: and_z_zi
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x05800000
    mask: 0xfffc0000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    imm13:
      hibit: 17
      width: 13
      encode: == xxxxxxxxxxxxx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          imm13: 0xxxxxx0xxxxx
          label: S
        - boolean: eq
          imm13: 0xxxxxx10xxxx
          label: H
        - boolean: eq
          imm13: 0xxxxxx110xxx
          label: B
        - boolean: eq
          imm13: 0xxxxxx1110xx
          label: B
        - boolean: eq
          imm13: 0xxxxxx11110x
          label: B
        - boolean: eq
          imm13: 1xxxxxxxxxxxx
          label: D
  undef_constraint:
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000000011
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000000101
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000000110
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000001001
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000001010
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000001100
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000010001
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000010010
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000010100
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000011000
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000100001
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000100010
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000100100
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000101000
    - imm13:
        value: 0b0000000000000
        mask: 0b0000000110000
    - imm13:
        value: 0b1000000000000
        mask: 0b1000000000001
    - imm13:
        value: 0b1000000000000
        mask: 0b1000000000010
    - imm13:
        value: 0b1000000000000
        mask: 0b1000000000100
    - imm13:
        value: 0b1000000000000
        mask: 0b1000000001000
    - imm13:
        value: 0b1000000000000
        mask: 0b1000000010000
    - imm13:
        value: 0b1000000000000
        mask: 0b1000000100000
  undef_debug_constraint: ~
and_z_zz_:
  mnemonic: AND
  instr_class: sve
  asmtemplate: 'AND     <Zd>.D, <Zn>.D, <Zm>.D'
  feature: ~
  asl:
    iformid: and_z_zz.xml
    iform: 'AND (vectors, unpredicated)'
    iclassid: iclass_sve
    encoding_name: and_z_zz_
    decode_hier: sve.sve_int_unpred_logical.sve_int_bin_cons_log
  usl:
    flow: and_z_zz
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x04203000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
andqv_z_p_z_:
  mnemonic: ANDQV
  instr_class: sve2
  asmtemplate: 'ANDQV   <Vd>.<T>, <Pg>, <Zn>.<Tb>'
  feature: FEAT_SVE2p1
  asl:
    iformid: andqv_z_p_z.xml
    iform: ANDQV
    iclassid: iclass_sve2
    encoding_name: andqv_z_p_z_
    decode_hier: sve.sve_int_pred_red.sve_int_reduce_2q
  usl: ~
  fix_encode:
    value: 0x041e2000
    mask: 0xff3fe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Vd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_scalar_var
        use: dst
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: 16B
          size: 00
        - boolean: eq
          label: 8H
          size: 01
        - boolean: eq
          label: 4S
          size: 10
        - boolean: eq
          label: 2D
          size: 11
    Tb:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: ~
  undef_debug_constraint: ~
ands_32_log_shift:
  mnemonic: ANDS
  instr_class: general
  asmtemplate: 'ANDS  <Wd>, <Wn>, <Wm>{, <shift> #<amount>}'
  feature: ~
  asl:
    iformid: ands_log_shift.xml
    iform: ANDS (shifted register) 32-bit
    iclassid: iclass_s
    encoding_name: ANDS_32_log_shift
    decode_hier: dpreg.log_shift
  usl:
    flow: ANDS_log_shift
    decoder: dp
    steering:
      - bx
      - ix
      - mx
  fix_encode:
    value: 0x6a000000
    mask: 0xff200000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    imm6:
      hibit: 15
      width: 6
      encode: == xxxxxx
    shift:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    ps_imm6:
      type: normal
      constraints:
        - boolean: eq
          imm6: 0xxxxx
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL
          shift: 00
        - boolean: eq
          label: LSR
          shift: 01
        - boolean: eq
          label: ASR
          shift: 10
        - boolean: eq
          label: ROR
          shift: 11
  undef_constraint:
    - imm6:
        value: 0b000000
        mask: 0b100000
  undef_debug_constraint: ~
ands_32s_log_imm:
  mnemonic: ANDS
  instr_class: general
  asmtemplate: 'ANDS  <Wd>, <Wn>, #<imm>'
  feature: ~
  asl:
    iformid: ands_log_imm.xml
    iform: ANDS (immediate) 32-bit
    iclassid: iclass_s
    encoding_name: ANDS_32S_log_imm
    decode_hier: dpimm.log_imm
  usl:
    flow: ANDS_log_imm
    decoder: dp
    steering:
      - bx
      - ix
  fix_encode:
    value: 0x72000000
    mask: 0xffc00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    immr:
      hibit: 21
      width: 6
      encode: == xxxxxx
    imms:
      hibit: 15
      width: 6
      encode: == xxxxxx
  constraint: {}
  undef_constraint:
    - imms:
        value: 0b000000
        mask: 0b000011
    - imms:
        value: 0b000000
        mask: 0b000101
    - imms:
        value: 0b000000
        mask: 0b000110
    - imms:
        value: 0b000000
        mask: 0b001001
    - imms:
        value: 0b000000
        mask: 0b001010
    - imms:
        value: 0b000000
        mask: 0b001100
    - imms:
        value: 0b000000
        mask: 0b010001
    - imms:
        value: 0b000000
        mask: 0b010010
    - imms:
        value: 0b000000
        mask: 0b010100
    - imms:
        value: 0b000000
        mask: 0b011000
    - imms:
        value: 0b000000
        mask: 0b100001
    - imms:
        value: 0b000000
        mask: 0b100010
    - imms:
        value: 0b000000
        mask: 0b100100
    - imms:
        value: 0b000000
        mask: 0b101000
    - imms:
        value: 0b000000
        mask: 0b110000
  undef_debug_constraint: ~
ands_64_log_shift:
  mnemonic: ANDS
  instr_class: general
  asmtemplate: 'ANDS  <Xd>, <Xn>, <Xm>{, <shift> #<amount>}'
  feature: ~
  asl:
    iformid: ands_log_shift.xml
    iform: ANDS (shifted register) 64-bit
    iclassid: iclass_s
    encoding_name: ANDS_64_log_shift
    decode_hier: dpreg.log_shift
  usl:
    flow: ANDS_log_shift
    decoder: dp
    steering:
      - bx
      - ix
      - mx
  fix_encode:
    value: 0xea000000
    mask: 0xff200000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    imm6:
      hibit: 15
      width: 6
      encode: == xxxxxx
    shift:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    shift:
      type: normal
      constraints:
        - boolean: eq
          label: LSL
          shift: 00
        - boolean: eq
          label: LSR
          shift: 01
        - boolean: eq
          label: ASR
          shift: 10
        - boolean: eq
          label: ROR
          shift: 11
  undef_constraint: []
  undef_debug_constraint: ~
ands_64s_log_imm:
  mnemonic: ANDS
  instr_class: general
  asmtemplate: 'ANDS  <Xd>, <Xn>, #<imm>'
  feature: ~
  asl:
    iformid: ands_log_imm.xml
    iform: ANDS (immediate) 64-bit
    iclassid: iclass_s
    encoding_name: ANDS_64S_log_imm
    decode_hier: dpimm.log_imm
  usl:
    flow: ANDS_log_imm
    decoder: dp
    steering:
      - bx
      - ix
  fix_encode:
    value: 0xf2000000
    mask: 0xff800000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    N:
      hibit: 22
      width: 1
      encode: == x
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    immr:
      hibit: 21
      width: 6
      encode: == xxxxxx
    imms:
      hibit: 15
      width: 6
      encode: == xxxxxx
  constraint: {}
  undef_constraint:
    - imms:
        value: 0b000000
        mask: 0b000011
    - imms:
        value: 0b000000
        mask: 0b000101
    - imms:
        value: 0b000000
        mask: 0b000110
    - imms:
        value: 0b000000
        mask: 0b001001
    - imms:
        value: 0b000000
        mask: 0b001010
    - imms:
        value: 0b000000
        mask: 0b001100
    - imms:
        value: 0b000000
        mask: 0b010001
    - imms:
        value: 0b000000
        mask: 0b010010
    - imms:
        value: 0b000000
        mask: 0b010100
    - imms:
        value: 0b000000
        mask: 0b011000
    - imms:
        value: 0b000000
        mask: 0b100001
    - imms:
        value: 0b000000
        mask: 0b100010
    - imms:
        value: 0b000000
        mask: 0b100100
    - imms:
        value: 0b000000
        mask: 0b101000
    - imms:
        value: 0b000000
        mask: 0b110000
    - N:
        value: 0b1
        mask: 0b1
      imms:
        value: 0b000000
        mask: 0b000001
    - N:
        value: 0b1
        mask: 0b1
      imms:
        value: 0b000000
        mask: 0b000010
    - N:
        value: 0b1
        mask: 0b1
      imms:
        value: 0b000000
        mask: 0b000100
    - N:
        value: 0b1
        mask: 0b1
      imms:
        value: 0b000000
        mask: 0b001000
    - N:
        value: 0b1
        mask: 0b1
      imms:
        value: 0b000000
        mask: 0b010000
    - N:
        value: 0b1
        mask: 0b1
      imms:
        value: 0b000000
        mask: 0b100000
  undef_debug_constraint: ~
ands_p_p_pp_z:
  mnemonic: ANDS
  instr_class: sve
  asmtemplate: 'ANDS    <Pd>.B, <Pg>/Z, <Pn>.B, <Pm>.B'
  feature: ~
  asl:
    iformid: ands_p_p_pp.xml
    iform: ANDS
    iclassid: iclass_s
    encoding_name: ands_p_p_pp_z
    decode_hier: sve.sve_int_pred_log
  usl:
    flow: ands_p_p_pp
    decoder: sve
    steering:
      - mx_pred
  fix_encode:
    value: 0x25404000
    mask: 0xfff0c210
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pd:
      hibit: 3
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: dst
    Pg:
      hibit: 13
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Pm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Pn:
      hibit: 8
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
andv_r_p_z_:
  mnemonic: ANDV
  instr_class: sve
  asmtemplate: 'ANDV    <V><d>, <Pg>, <Zn>.<T>'
  feature: ~
  asl:
    iformid: andv_r_p_z.xml
    iform: ANDV
    iclassid: iclass_sve
    encoding_name: andv_r_p_z_
    decode_hier: sve.sve_int_pred_red.sve_int_reduce_2
  usl:
    flow: andv_r_p_z
    decoder: sve
    steering:
      - vx_any
      - vx_int_reduce
  fix_encode:
    value: 0x041a2000
    mask: 0xff3fe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Vd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_scalar_var
        use: dst
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
    V:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: []
  undef_debug_constraint: ~
asr_z_p_zi_:
  mnemonic: ASR
  instr_class: sve
  asmtemplate: 'ASR     <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, #<const>'
  feature: ~
  asl:
    iformid: asr_z_p_zi.xml
    iform: 'ASR (immediate, predicated)'
    iclassid: iclass_sve
    encoding_name: asr_z_p_zi_
    decode_hier: sve.sve_int_pred_shift.sve_int_bin_pred_shift_0
  usl:
    flow: asr_z_p_zi
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x04008000
    mask: 0xff3fe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    imm3:
      hibit: 7
      width: 3
      encode: == xxx
    tszh:
      hibit: 23
      width: 2
      encode: == xx
    tszl:
      hibit: 9
      width: 2
      encode: == xx
  constraint:
    T:
      type: cross
      constraints:
        - boolean: eq
          label: B
          tszh: 00
          tszl: 01
        - boolean: eq
          label: H
          tszh: 00
          tszl: 1x
        - boolean: eq
          label: S
          tszh: 01
          tszl: xx
        - boolean: eq
          label: D
          tszh: 1x
          tszl: xx
  undef_constraint:
    - tszl:
        value: 0b01
        mask: 0b01
    - tszl:
        value: 0b10
        mask: 0b10
    - tszh:
        value: 0b01
        mask: 0b01
    - tszh:
        value: 0b10
        mask: 0b10
  undef_debug_constraint: ~
asr_z_p_zw_:
  mnemonic: ASR
  instr_class: sve
  asmtemplate: 'ASR     <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.D'
  feature: ~
  asl:
    iformid: asr_z_p_zw.xml
    iform: 'ASR (wide elements, predicated)'
    iclassid: iclass_sve
    encoding_name: asr_z_p_zw_
    decode_hier: sve.sve_int_pred_shift.sve_int_bin_pred_shift_2
  usl:
    flow: asr_z_p_zw
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x04188000
    mask: 0xff3fe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
  undef_constraint:
    - size:
        value: 0b00
        mask: 0b01
    - size:
        value: 0b00
        mask: 0b10
  undef_debug_constraint: ~
asr_z_p_zz_:
  mnemonic: ASR
  instr_class: sve
  asmtemplate: 'ASR     <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>'
  feature: ~
  asl:
    iformid: asr_z_p_zz.xml
    iform: ASR (vectors)
    iclassid: iclass_sve
    encoding_name: asr_z_p_zz_
    decode_hier: sve.sve_int_pred_shift.sve_int_bin_pred_shift_1
  usl:
    flow: asr_z_p_zz
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x04108000
    mask: 0xff3fe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: []
  undef_debug_constraint: ~
asr_z_zi_:
  mnemonic: ASR
  instr_class: sve
  asmtemplate: 'ASR     <Zd>.<T>, <Zn>.<T>, #<const>'
  feature: ~
  asl:
    iformid: asr_z_zi.xml
    iform: 'ASR (immediate, unpredicated)'
    iclassid: iclass_sve
    encoding_name: asr_z_zi_
    decode_hier: sve.sve_int_unpred_shift.sve_int_bin_cons_shift_b
  usl:
    flow: asr_z_zi
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x04209000
    mask: 0xff20fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    imm3:
      hibit: 18
      width: 3
      encode: == xxx
    tszh:
      hibit: 23
      width: 2
      encode: == xx
    tszl:
      hibit: 20
      width: 2
      encode: == xx
  constraint:
    T:
      type: cross
      constraints:
        - boolean: eq
          label: B
          tszh: 00
          tszl: 01
        - boolean: eq
          label: H
          tszh: 00
          tszl: 1x
        - boolean: eq
          label: S
          tszh: 01
          tszl: xx
        - boolean: eq
          label: D
          tszh: 1x
          tszl: xx
  undef_constraint:
    - tszl:
        value: 0b01
        mask: 0b01
    - tszl:
        value: 0b10
        mask: 0b10
    - tszh:
        value: 0b01
        mask: 0b01
    - tszh:
        value: 0b10
        mask: 0b10
  undef_debug_constraint: ~
asr_z_zw_:
  mnemonic: ASR
  instr_class: sve
  asmtemplate: 'ASR     <Zd>.<T>, <Zn>.<T>, <Zm>.D'
  feature: ~
  asl:
    iformid: asr_z_zw.xml
    iform: 'ASR (wide elements, unpredicated)'
    iclassid: iclass_sve
    encoding_name: asr_z_zw_
    decode_hier: sve.sve_int_unpred_shift.sve_int_bin_cons_shift_a
  usl:
    flow: asr_z_zw
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x04208000
    mask: 0xff20fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
  undef_constraint:
    - size:
        value: 0b00
        mask: 0b01
    - size:
        value: 0b00
        mask: 0b10
  undef_debug_constraint: ~
asrd_z_p_zi_:
  mnemonic: ASRD
  instr_class: sve
  asmtemplate: 'ASRD    <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, #<const>'
  feature: ~
  asl:
    iformid: asrd_z_p_zi.xml
    iform: ASRD
    iclassid: iclass_sve
    encoding_name: asrd_z_p_zi_
    decode_hier: sve.sve_int_pred_shift.sve_int_bin_pred_shift_0
  usl:
    flow: asrd_z_p_zi
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x04048000
    mask: 0xff3fe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    imm3:
      hibit: 7
      width: 3
      encode: == xxx
    tszh:
      hibit: 23
      width: 2
      encode: == xx
    tszl:
      hibit: 9
      width: 2
      encode: == xx
  constraint:
    T:
      type: cross
      constraints:
        - boolean: eq
          label: B
          tszh: 00
          tszl: 01
        - boolean: eq
          label: H
          tszh: 00
          tszl: 1x
        - boolean: eq
          label: S
          tszh: 01
          tszl: xx
        - boolean: eq
          label: D
          tszh: 1x
          tszl: xx
  undef_constraint:
    - tszl:
        value: 0b01
        mask: 0b01
    - tszl:
        value: 0b10
        mask: 0b10
    - tszh:
        value: 0b01
        mask: 0b01
    - tszh:
        value: 0b10
        mask: 0b10
  undef_debug_constraint: ~
asrr_z_p_zz_:
  mnemonic: ASRR
  instr_class: sve
  asmtemplate: 'ASRR    <Zdn>.<T>, <Pg>/M, <Zdn>.<T>, <Zm>.<T>'
  feature: ~
  asl:
    iformid: asrr_z_p_zz.xml
    iform: ASRR
    iclassid: iclass_sve
    encoding_name: asrr_z_p_zz_
    decode_hier: sve.sve_int_pred_shift.sve_int_bin_pred_shift_1
  usl:
    flow: asrr_z_p_zz
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x04148000
    mask: 0xff3fe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: []
  undef_debug_constraint: ~
asrv_32_dp_2src:
  mnemonic: ASRV
  instr_class: general
  asmtemplate: 'ASRV  <Wd>, <Wn>, <Wm>'
  feature: ~
  asl:
    iformid: asrv.xml
    iform: ASRV 32-bit
    iclassid: iclass_general
    encoding_name: ASRV_32_dp_2src
    decode_hier: dpreg.dp_2src
  usl:
    flow: ASRV
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x1ac02800
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
asrv_64_dp_2src:
  mnemonic: ASRV
  instr_class: general
  asmtemplate: 'ASRV  <Xd>, <Xn>, <Xm>'
  feature: ~
  asl:
    iformid: asrv.xml
    iform: ASRV 64-bit
    iclassid: iclass_general
    encoding_name: ASRV_64_dp_2src
    decode_hier: dpreg.dp_2src
  usl:
    flow: ASRV
    decoder: dp
    steering:
      - ix
  fix_encode:
    value: 0x9ac02800
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
at_sys_cr_systeminstrs:
  mnemonic: SYS
  instr_class: system
  asmtemplate: 'AT <at_op>, <Xt>'
  feature: ~
  asl:
    iformid: at_sys.xml
    iform: AT_SYS
    iclassid: iclass_system
    encoding_name: AT_SYS_CR_systeminstrs
    decode_hier: control.systeminstrs
  usl:
    flow: SYS
    decoder: sy
    steering:
      - sta
  fix_encode:
    value: 0xd5087000
    mask: 0xfff8f000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    CRm:
      hibit: 11
      width: 4
      encode: == 100x
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    op1:
      hibit: 18
      width: 3
      encode: == xxx
    op2:
      hibit: 7
      width: 3
      encode: == xxx
  constraint:
    at_op:
      type: cross
      constraints:
        - CRm: 1000
          boolean: eq
          label: S1E1R
          op1: 000
          op2: 000
        - CRm: 1000
          boolean: eq
          label: S1E1W
          op1: 000
          op2: 001
        - CRm: 1000
          boolean: eq
          label: S1E0R
          op1: 000
          op2: 010
        - CRm: 1000
          boolean: eq
          label: S1E0W
          op1: 000
          op2: 011
        - CRm: 1001
          boolean: eq
          label: S1E1RP
          op1: 000
          op2: 000
        - CRm: 1001
          boolean: eq
          label: S1E1WP
          op1: 000
          op2: 001
        - CRm: 1001
          boolean: eq
          label: S1E1A
          op1: 000
          op2: 010
        - CRm: 1000
          boolean: eq
          label: S1E2R
          op1: 100
          op2: 000
        - CRm: 1000
          boolean: eq
          label: S1E2W
          op1: 100
          op2: 001
        - CRm: 1000
          boolean: eq
          label: S12E1R
          op1: 100
          op2: 100
        - CRm: 1000
          boolean: eq
          label: S12E1W
          op1: 100
          op2: 101
        - CRm: 1000
          boolean: eq
          label: S12E0R
          op1: 100
          op2: 110
        - CRm: 1000
          boolean: eq
          label: S12E0W
          op1: 100
          op2: 111
        - CRm: 1001
          boolean: eq
          label: S1E2A
          op1: 100
          op2: 010
        - CRm: 1000
          boolean: eq
          label: S1E3R
          op1: 110
          op2: 000
        - CRm: 1000
          boolean: eq
          label: S1E3W
          op1: 110
          op2: 001
        - CRm: 1001
          boolean: eq
          label: S1E3A
          op1: 110
          op2: 010
  undef_constraint: []
  undef_debug_constraint: []
autda_64p_dp_1src:
  mnemonic: AUTDA
  instr_class: general
  asmtemplate: 'AUTDA  <Xd>, <Xn|SP>'
  feature: FEAT_PAuth
  asl:
    iformid: autda.xml
    iform: AUTDA
    iclassid: iclass_general
    encoding_name: AUTDA_64P_dp_1src
    decode_hier: dpreg.dp_1src
  usl:
    flow: AUTDA
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xdac11800
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autdb_64p_dp_1src:
  mnemonic: AUTDB
  instr_class: general
  asmtemplate: 'AUTDB  <Xd>, <Xn|SP>'
  feature: FEAT_PAuth
  asl:
    iformid: autdb.xml
    iform: AUTDB
    iclassid: iclass_general
    encoding_name: AUTDB_64P_dp_1src
    decode_hier: dpreg.dp_1src
  usl:
    flow: AUTDB
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xdac11c00
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autdza_64z_dp_1src:
  mnemonic: AUTDZA
  instr_class: general
  asmtemplate: 'AUTDZA  <Xd>'
  feature: FEAT_PAuth
  asl:
    iformid: autda.xml
    iform: AUTDZA
    iclassid: iclass_general
    encoding_name: AUTDZA_64Z_dp_1src
    decode_hier: dpreg.dp_1src
  usl:
    flow: AUTDA
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xdac13be0
    mask: 0xffffffe0
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autdzb_64z_dp_1src:
  mnemonic: AUTDZB
  instr_class: general
  asmtemplate: 'AUTDZB  <Xd>'
  feature: FEAT_PAuth
  asl:
    iformid: autdb.xml
    iform: AUTDZB
    iclassid: iclass_general
    encoding_name: AUTDZB_64Z_dp_1src
    decode_hier: dpreg.dp_1src
  usl:
    flow: AUTDB
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xdac13fe0
    mask: 0xffffffe0
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autia1716_hi_hints:
  mnemonic: AUTIA1716
  instr_class: system
  asmtemplate: AUTIA1716
  feature: FEAT_PAuth
  asl:
    iformid: autia.xml
    iform: AUTIA1716
    iclassid: iclass_system
    encoding_name: AUTIA1716_HI_hints
    decode_hier: control.hints
  usl:
    flow: AUTIA
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xd503219f
    mask: 0xffffffff
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode: ~
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autia_64p_dp_1src:
  mnemonic: AUTIA
  instr_class: general
  asmtemplate: 'AUTIA  <Xd>, <Xn|SP>'
  feature: FEAT_PAuth
  asl:
    iformid: autia.xml
    iform: AUTIA
    iclassid: iclass_general
    encoding_name: AUTIA_64P_dp_1src
    decode_hier: dpreg.dp_1src
  usl:
    flow: AUTIA
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xdac11000
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autiasp_hi_hints:
  mnemonic: AUTIASP
  instr_class: system
  asmtemplate: AUTIASP
  feature: FEAT_PAuth
  asl:
    iformid: autia.xml
    iform: AUTIASP
    iclassid: iclass_system
    encoding_name: AUTIASP_HI_hints
    decode_hier: control.hints
  usl:
    flow: AUTIA
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xd50323bf
    mask: 0xffffffff
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode: ~
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autiaz_hi_hints:
  mnemonic: AUTIAZ
  instr_class: system
  asmtemplate: AUTIAZ
  feature: FEAT_PAuth
  asl:
    iformid: autia.xml
    iform: AUTIAZ
    iclassid: iclass_system
    encoding_name: AUTIAZ_HI_hints
    decode_hier: control.hints
  usl:
    flow: AUTIA
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xd503239f
    mask: 0xffffffff
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode: ~
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autib1716_hi_hints:
  mnemonic: AUTIB1716
  instr_class: system
  asmtemplate: AUTIB1716
  feature: FEAT_PAuth
  asl:
    iformid: autib.xml
    iform: AUTIB1716
    iclassid: iclass_system
    encoding_name: AUTIB1716_HI_hints
    decode_hier: control.hints
  usl:
    flow: AUTIB
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xd50321df
    mask: 0xffffffff
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode: ~
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autib_64p_dp_1src:
  mnemonic: AUTIB
  instr_class: general
  asmtemplate: 'AUTIB  <Xd>, <Xn|SP>'
  feature: FEAT_PAuth
  asl:
    iformid: autib.xml
    iform: AUTIB
    iclassid: iclass_general
    encoding_name: AUTIB_64P_dp_1src
    decode_hier: dpreg.dp_1src
  usl:
    flow: AUTIB
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xdac11400
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autibsp_hi_hints:
  mnemonic: AUTIBSP
  instr_class: system
  asmtemplate: AUTIBSP
  feature: FEAT_PAuth
  asl:
    iformid: autib.xml
    iform: AUTIBSP
    iclassid: iclass_system
    encoding_name: AUTIBSP_HI_hints
    decode_hier: control.hints
  usl:
    flow: AUTIB
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xd50323ff
    mask: 0xffffffff
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode: ~
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autibz_hi_hints:
  mnemonic: AUTIBZ
  instr_class: system
  asmtemplate: AUTIBZ
  feature: FEAT_PAuth
  asl:
    iformid: autib.xml
    iform: AUTIBZ
    iclassid: iclass_system
    encoding_name: AUTIBZ_HI_hints
    decode_hier: control.hints
  usl:
    flow: AUTIB
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xd50323df
    mask: 0xffffffff
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode: ~
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autiza_64z_dp_1src:
  mnemonic: AUTIZA
  instr_class: general
  asmtemplate: 'AUTIZA  <Xd>'
  feature: FEAT_PAuth
  asl:
    iformid: autia.xml
    iform: AUTIZA
    iclassid: iclass_general
    encoding_name: AUTIZA_64Z_dp_1src
    decode_hier: dpreg.dp_1src
  usl:
    flow: AUTIA
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xdac133e0
    mask: 0xffffffe0
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
autizb_64z_dp_1src:
  mnemonic: AUTIZB
  instr_class: general
  asmtemplate: 'AUTIZB  <Xd>'
  feature: FEAT_PAuth
  asl:
    iformid: autib.xml
    iform: AUTIZB
    iclassid: iclass_general
    encoding_name: AUTIZB_64Z_dp_1src
    decode_hier: dpreg.dp_1src
  usl:
    flow: AUTIB
    decoder: dp
    steering:
      - creg
  fix_encode:
    value: 0xdac137e0
    mask: 0xffffffe0
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
axflag_m_pstate:
  mnemonic: AXFLAG
  instr_class: system
  asmtemplate: AXFLAG
  feature: FEAT_FlagM2
  asl:
    iformid: axflag.xml
    iform: AXFLAG
    iclassid: iclass_system
    encoding_name: AXFLAG_M_pstate
    decode_hier: control.pstate
  usl:
    flow: AXFLAG
    decoder: sy
    steering:
      - ix
  fix_encode:
    value: 0xd500405f
    mask: 0xfffff0ff
    sb_value: 0x00000000
    sb_mask: 0x00000f00
  var_encode: ~
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
b_only_branch_imm:
  mnemonic: B
  instr_class: general
  asmtemplate: 'B  <label>'
  feature: ~
  asl:
    iformid: b_uncond.xml
    iform: B
    iclassid: iclass_br26
    encoding_name: B_only_branch_imm
    decode_hier: control.branch_imm
  usl:
    flow: B_uncond
    decoder: br
    steering:
      - bx
  fix_encode:
    value: 0x14000000
    mask: 0xfc000000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    imm26:
      hibit: 25
      width: 26
      encode: == xxxxxxxxxxxxxxxxxxxxxxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
b_only_condbranch:
  mnemonic: B
  instr_class: general
  asmtemplate: 'B.<cond>  <label>'
  feature: ~
  asl:
    iformid: b_cond.xml
    iform: B.cond
    iclassid: iclass_br19
    encoding_name: B_only_condbranch
    decode_hier: control.condbranch
  usl:
    flow: B_cond
    decoder: br
    steering:
      - bx
  fix_encode:
    value: 0x54000000
    mask: 0xff000010
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    cond:
      hibit: 3
      width: 4
      encode: == xxxx
    imm19:
      hibit: 23
      width: 19
      encode: == xxxxxxxxxxxxxxxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bc_only_condbranch:
  mnemonic: BC
  instr_class: general
  asmtemplate: 'BC.<cond>  <label>'
  feature: FEAT_HBC
  asl:
    iformid: bc_cond.xml
    iform: BC.cond
    iclassid: iclass_br19
    encoding_name: BC_only_condbranch
    decode_hier: control.condbranch
  usl: ~
  fix_encode:
    value: 0x54000010
    mask: 0xff000010
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    cond:
      hibit: 3
      width: 4
      encode: == xxxx
    imm19:
      hibit: 23
      width: 19
      encode: == xxxxxxxxxxxxxxxxxxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bcax_vvv16_crypto4:
  mnemonic: BCAX
  instr_class: advsimd
  asmtemplate: 'BCAX  <Vd>.16B, <Vn>.16B, <Vm>.16B, <Va>.16B'
  feature: FEAT_SHA3
  asl:
    iformid: bcax_advsimd.xml
    iform: BCAX SIMD
    iclassid: iclass_advsimd
    encoding_name: BCAX_VVV16_crypto4
    decode_hier: simd-dp.crypto4
  usl:
    flow: BCAX_advsimd
    decoder: vx
    steering:
      - vx_aes
  fix_encode:
    value: 0xce200000
    mask: 0xffe08000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Ra:
      hibit: 14
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bcax_z_zzz_:
  mnemonic: BCAX
  instr_class: sve2
  asmtemplate: 'BCAX    <Zdn>.D, <Zdn>.D, <Zm>.D, <Zk>.D'
  feature: ~
  asl:
    iformid: bcax_z_zzz.xml
    iform: BCAX SVE
    iclassid: iclass_sve2
    encoding_name: bcax_z_zzz_
    decode_hier: sve.sve_int_unpred_logical.sve_int_tern_log
  usl:
    flow: bcax_z_zzz
    decoder: sve
    steering:
      - vx_aes
  fix_encode:
    value: 0x04603800
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zk:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bdep_z_zz_:
  mnemonic: BDEP
  instr_class: sve2
  asmtemplate: 'BDEP    <Zd>.<T>, <Zn>.<T>, <Zm>.<T>'
  feature: FEAT_SVE_BitPerm
  asl:
    iformid: bdep_z_zz.xml
    iform: BDEP
    iclassid: iclass_sve2
    encoding_name: bdep_z_zz_
    decode_hier: sve.sve_intx_constructive.sve_intx_perm_bit
  usl:
    flow: bdep_z_zz
    decoder: sve
    steering:
      - vx_sve_shuf
  fix_encode:
    value: 0x4500b400
    mask: 0xff20fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: []
  undef_debug_constraint: ~
bext_z_zz_:
  mnemonic: BEXT
  instr_class: sve2
  asmtemplate: 'BEXT    <Zd>.<T>, <Zn>.<T>, <Zm>.<T>'
  feature: FEAT_SVE_BitPerm
  asl:
    iformid: bext_z_zz.xml
    iform: BEXT
    iclassid: iclass_sve2
    encoding_name: bext_z_zz_
    decode_hier: sve.sve_intx_constructive.sve_intx_perm_bit
  usl:
    flow: bext_z_zz
    decoder: sve
    steering:
      - vx_sve_shuf
  fix_encode:
    value: 0x4500b000
    mask: 0xff20fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    size:
      hibit: 23
      width: 2
      encode: == xx
  constraint:
    T:
      type: normal
      constraints:
        - boolean: eq
          label: B
          size: 00
        - boolean: eq
          label: H
          size: 01
        - boolean: eq
          label: S
          size: 10
        - boolean: eq
          label: D
          size: 11
  undef_constraint: []
  undef_debug_constraint: ~
bf1cvt_mz2_z8_:
  mnemonic: BF1CVT
  instr_class: mortlach2
  asmtemplate: 'BF1CVT  { <Zd1>.H-<Zd2>.H }, <Zn>.B'
  feature: FEAT_SME2
  asl:
    iformid: bf1cvt_mz2_z8.xml
    iform: BF1CVT SME
    iclassid: iclass_bf1cvt
    encoding_name: bf1cvt_mz2_z8_
    decode_hier: sme.mortlach_multi_sve_4.mortlach_multi2_wide_fp8_cvrt
  usl: ~
  fix_encode:
    value: 0xc166e000
    mask: 0xfffffc01
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 4
      encode: == xxxx
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bf1cvt_z_z8_b2bf:
  mnemonic: BF1CVT
  instr_class: sve2
  asmtemplate: 'BF1CVT  <Zd>.H, <Zn>.B'
  feature: FEAT_FP8
  asl:
    iformid: bf1cvt_z_z8.xml
    iform: BF1CVT SVE
    iclassid: iclass_bf1cvt
    encoding_name: bf1cvt_z_z8_b2bf
    decode_hier: sve.sve_fp_unary_unpred.sve_fp8_fcvt_wide
  usl:
    flow: bf1cvt_z_z8
    decoder: sve
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x65083800
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bf1cvtl2_v_v8_b2bf:
  mnemonic: BF1CVTL2
  instr_class: advsimd
  asmtemplate: 'BF1CVTL2 <Vd>.8H, <Vn>.16B'
  feature: FEAT_FP8
  asl:
    iformid: bf1cvtl2_v_v8.xml
    iform: BF1CVTL2
    iclassid: iclass_bf1cvtl2
    encoding_name: bf1cvtl2_v_v8_b2bf
    decode_hier: simd-dp.fp8
  usl:
    flow: BF12CVTL_advsimd
    decoder: vx
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x6ea17800
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bf1cvtl_mz2_z8_:
  mnemonic: BF1CVTL
  instr_class: mortlach2
  asmtemplate: 'BF1CVTL { <Zd1>.H-<Zd2>.H }, <Zn>.B'
  feature: FEAT_SME2
  asl:
    iformid: bf1cvtl_mz2_z8.xml
    iform: BF1CVTL SME
    iclassid: iclass_bf1cvtl
    encoding_name: bf1cvtl_mz2_z8_
    decode_hier: sme.mortlach_multi_sve_4.mortlach_multi2_wide_fp8_cvrt
  usl: ~
  fix_encode:
    value: 0xc166e001
    mask: 0xfffffc01
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 4
      encode: == xxxx
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bf1cvtl_v_v8_b2bf:
  mnemonic: BF1CVTL
  instr_class: advsimd
  asmtemplate: 'BF1CVTL <Vd>.8H, <Vn>.8B'
  feature: FEAT_FP8
  asl:
    iformid: bf1cvtl2_v_v8.xml
    iform: 'BF1CVTL Lower-half, FPMR-F8S1'
    iclassid: iclass_bf1cvtl
    encoding_name: bf1cvtl_v_v8_b2bf
    decode_hier: simd-dp.fp8
  usl:
    flow: BF12CVTL_advsimd
    decoder: vx
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x2ea17800
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bf1cvtlt_z_z8_b2bf:
  mnemonic: BF1CVTLT
  instr_class: sve2
  asmtemplate: 'BF1CVTLT <Zd>.H, <Zn>.B'
  feature: FEAT_FP8
  asl:
    iformid: bf1cvtlt_z_z8.xml
    iform: BF1CVTLT
    iclassid: iclass_bf1cvtlt
    encoding_name: bf1cvtlt_z_z8_b2bf
    decode_hier: sve.sve_fp_unary_unpred.sve_fp8_fcvt_wide
  usl:
    flow: bf1cvtlt_z_z8
    decoder: sve
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x65093800
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bf2cvt_mz2_z8_:
  mnemonic: BF2CVT
  instr_class: mortlach2
  asmtemplate: 'BF2CVT  { <Zd1>.H-<Zd2>.H }, <Zn>.B'
  feature: FEAT_SME2
  asl:
    iformid: bf1cvt_mz2_z8.xml
    iform: BF2CVT SME
    iclassid: iclass_bf2cvt
    encoding_name: bf2cvt_mz2_z8_
    decode_hier: sme.mortlach_multi_sve_4.mortlach_multi2_wide_fp8_cvrt
  usl: ~
  fix_encode:
    value: 0xc1e6e000
    mask: 0xfffffc01
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 4
      encode: == xxxx
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bf2cvt_z_z8_b2bf:
  mnemonic: BF2CVT
  instr_class: sve2
  asmtemplate: 'BF2CVT  <Zd>.H, <Zn>.B'
  feature: FEAT_FP8
  asl:
    iformid: bf1cvt_z_z8.xml
    iform: BF2CVT SVE
    iclassid: iclass_bf2cvt
    encoding_name: bf2cvt_z_z8_b2bf
    decode_hier: sve.sve_fp_unary_unpred.sve_fp8_fcvt_wide
  usl:
    flow: bf1cvt_z_z8
    decoder: sve
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x65083c00
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bf2cvtl2_v_v8_b2bf:
  mnemonic: BF2CVTL2
  instr_class: advsimd
  asmtemplate: 'BF2CVTL2 <Vd>.8H, <Vn>.16B'
  feature: FEAT_FP8
  asl:
    iformid: bf1cvtl2_v_v8.xml
    iform: BF2CVTL2
    iclassid: iclass_bf2cvtl2
    encoding_name: bf2cvtl2_v_v8_b2bf
    decode_hier: simd-dp.fp8
  usl:
    flow: BF12CVTL_advsimd
    decoder: vx
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x6ee17800
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bf2cvtl_mz2_z8_:
  mnemonic: BF2CVTL
  instr_class: mortlach2
  asmtemplate: 'BF2CVTL { <Zd1>.H-<Zd2>.H }, <Zn>.B'
  feature: FEAT_SME2
  asl:
    iformid: bf1cvtl_mz2_z8.xml
    iform: BF2CVTL SME
    iclassid: iclass_bf2cvtl
    encoding_name: bf2cvtl_mz2_z8_
    decode_hier: sme.mortlach_multi_sve_4.mortlach_multi2_wide_fp8_cvrt
  usl: ~
  fix_encode:
    value: 0xc1e6e001
    mask: 0xfffffc01
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 4
      encode: == xxxx
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bf2cvtl_v_v8_b2bf:
  mnemonic: BF2CVTL
  instr_class: advsimd
  asmtemplate: 'BF2CVTL <Vd>.8H, <Vn>.8B'
  feature: FEAT_FP8
  asl:
    iformid: bf1cvtl2_v_v8.xml
    iform: 'BF2CVTL Lower-half, FPMR-F8S2'
    iclassid: iclass_bf2cvtl
    encoding_name: bf2cvtl_v_v8_b2bf
    decode_hier: simd-dp.fp8
  usl:
    flow: BF12CVTL_advsimd
    decoder: vx
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x2ee17800
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bf2cvtlt_z_z8_b2bf:
  mnemonic: BF2CVTLT
  instr_class: sve2
  asmtemplate: 'BF2CVTLT <Zd>.H, <Zn>.B'
  feature: FEAT_FP8
  asl:
    iformid: bf1cvtlt_z_z8.xml
    iform: BF2CVTLT
    iclassid: iclass_bf2cvtlt
    encoding_name: bf2cvtlt_z_z8_b2bf
    decode_hier: sve.sve_fp_unary_unpred.sve_fp8_fcvt_wide
  usl:
    flow: bf1cvtlt_z_z8
    decoder: sve
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x65093c00
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bfadd_z_p_zz_:
  mnemonic: BFADD
  instr_class: sve2
  asmtemplate: 'BFADD   <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfadd_z_p_zz.xml
    iform: BFADD (predicated)
    iclassid: iclass_sve2
    encoding_name: bfadd_z_p_zz_
    decode_hier: sve.sve_fp_pred.sve_fp_2op_p_zds
  usl: ~
  fix_encode:
    value: 0x65008000
    mask: 0xffffe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfadd_z_zz_:
  mnemonic: BFADD
  instr_class: sve2
  asmtemplate: 'BFADD   <Zd>.H, <Zn>.H, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfadd_z_zz.xml
    iform: BFADD (unpredicated)
    iclassid: iclass_sve2
    encoding_name: bfadd_z_zz_
    decode_hier: sve.sve_fp_3op_u_zd
  usl: ~
  fix_encode:
    value: 0x65000000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfadd_za_zw_2x2_16:
  mnemonic: BFADD
  instr_class: mortlach2
  asmtemplate: 'BFADD   ZA.H[<Wv>, <offs>{, VGx2}], { <Zm1>.H-<Zm2>.H }'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfadd_za_zw.xml
    iform: BFADD Two ZA single-vectors
    iclassid: iclass_sme_vgx2_single
    encoding_name: bfadd_za_zw_2x2_16
    decode_hier: sme.mortlach_multi_array_2a.mortlach_multi2_z_za_f16_mm
  usl: ~
  fix_encode:
    value: 0xc1e41c00
    mask: 0xffff9c38
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 9
      width: 4
      encode: == xxxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfadd_za_zw_4x4_16:
  mnemonic: BFADD
  instr_class: mortlach2
  asmtemplate: 'BFADD   ZA.H[<Wv>, <offs>{, VGx4}], { <Zm1>.H-<Zm4>.H }'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfadd_za_zw.xml
    iform: BFADD Four ZA single-vectors
    iclassid: iclass_sme_vgx4_single
    encoding_name: bfadd_za_zw_4x4_16
    decode_hier: sme.mortlach_multi_array_2b.mortlach_multi4_z_za_f16_mm
  usl: ~
  fix_encode:
    value: 0xc1e51c00
    mask: 0xffff9c78
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 9
      width: 3
      encode: == xxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfclamp_mz_zz_2:
  mnemonic: BFCLAMP
  instr_class: mortlach2
  asmtemplate: 'BFCLAMP { <Zd1>.H-<Zd2>.H }, <Zn>.H, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfclamp_mz_zz.xml
    iform: BFCLAMP Two registers
    iclassid: iclass_to_2reg
    encoding_name: bfclamp_mz_zz_2
    decode_hier: sme.mortlach_multi_sve_3.mortlach_multi2_fclamp
  usl: ~
  fix_encode:
    value: 0xc120c000
    mask: 0xffe0fc01
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 4
      encode: == xxxx
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfclamp_mz_zz_4:
  mnemonic: BFCLAMP
  instr_class: mortlach2
  asmtemplate: 'BFCLAMP { <Zd1>.H-<Zd4>.H }, <Zn>.H, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfclamp_mz_zz.xml
    iform: BFCLAMP Four registers
    iclassid: iclass_to_4reg
    encoding_name: bfclamp_mz_zz_4
    decode_hier: sme.mortlach_multi_sve_3.mortlach_multi4_fclamp
  usl: ~
  fix_encode:
    value: 0xc120c800
    mask: 0xffe0fc03
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 3
      encode: == xxx
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfclamp_z_zz_:
  mnemonic: BFCLAMP
  instr_class: sve2
  asmtemplate: 'BFCLAMP <Zd>.H, <Zn>.H, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfclamp_z_zz.xml
    iform: BFCLAMP SVE
    iclassid: iclass_sve2
    encoding_name: bfclamp_z_zz_
    decode_hier: sve.sve_fp_clamp
  usl: ~
  fix_encode:
    value: 0x64202400
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfcvt_bs_floatdp1:
  mnemonic: BFCVT
  instr_class: float
  asmtemplate: 'BFCVT  <Hd>, <Sn>'
  feature: FEAT_BF16
  asl:
    iformid: bfcvt_float.xml
    iform: BFCVT SIMD
    iclassid: iclass_single_to_bf16
    encoding_name: BFCVT_BS_floatdp1
    decode_hier: simd-dp.floatdp1
  usl:
    flow: BFCVT_float
    decoder: vx
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x1e634000
    mask: 0xfffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_scalar_16
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_scalar_32
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bfcvt_z8_mz2_:
  mnemonic: BFCVT
  instr_class: mortlach2
  asmtemplate: 'BFCVT   <Zd>.B, { <Zn1>.H-<Zn2>.H }'
  feature: FEAT_SME2
  asl:
    iformid: bfcvt_z8_mz2.xml
    iform: BFCVT SME FP8
    iclassid: iclass_mortlach2
    encoding_name: bfcvt_z8_mz2_
    decode_hier: sme.mortlach_multi_sve_4.mortlach_multi2_narrow_fp8_cvrt
  usl: ~
  fix_encode:
    value: 0xc164e000
    mask: 0xfffffc20
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zn:
      hibit: 9
      width: 4
      encode: == xxxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfcvt_z_mz2_:
  mnemonic: BFCVT
  instr_class: mortlach2
  asmtemplate: 'BFCVT   <Zd>.H, { <Zn1>.S-<Zn2>.S }'
  feature: FEAT_SME2
  asl:
    iformid: bfcvt_z_mz2.xml
    iform: BFCVT SME
    iclassid: iclass_mortlach2
    encoding_name: bfcvt_z_mz2_
    decode_hier: sme.mortlach_multi_sve_4.mortlach_multi2_narrow_fp_cvrt
  usl: ~
  fix_encode:
    value: 0xc160e000
    mask: 0xfffffc20
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zn:
      hibit: 9
      width: 4
      encode: == xxxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfcvt_z_p_z_s2bf:
  mnemonic: BFCVT
  instr_class: sve
  asmtemplate: 'BFCVT   <Zd>.H, <Pg>/M, <Zn>.S'
  feature: FEAT_BF16
  asl:
    iformid: bfcvt_z_p_z.xml
    iform: BFCVT SVE
    iclassid: iclass_sve
    encoding_name: bfcvt_z_p_z_s2bf
    decode_hier: sve.sve_fp_unary.sve_fp_2op_p_zd_b_0
  usl:
    flow: bfcvt_z_p_z
    decoder: sve
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x658aa000
    mask: 0xffffe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bfcvtn_asimdmisc_4s:
  mnemonic: BFCVTN
  instr_class: advsimd
  asmtemplate: 'BFCVTN{2}  <Vd>.<Ta>, <Vn>.4S'
  feature: FEAT_BF16
  asl:
    iformid: bfcvtn_advsimd.xml
    iform: 'BFCVTN, BFCVTN2'
    iclassid: iclass_simd_single_and_bf16
    encoding_name: BFCVTN_asimdmisc_4S
    decode_hier: simd-dp.asimdmisc
  usl:
    flow: BFCVTN_advsimd
    decoder: vx
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x0ea16800
    mask: 0xbffffc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Q:
      hibit: 30
      width: 1
      encode: == x
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint:
    Ta:
      type: normal
      constraints:
        - Q: 0
          boolean: eq
          label: 4H
        - Q: 1
          boolean: eq
          label: 8H
  undef_constraint: []
  undef_debug_constraint: ~
bfcvtn_z8_mz2_bf2b:
  mnemonic: BFCVTN
  instr_class: sve2
  asmtemplate: 'BFCVTN  <Zd>.B, { <Zn1>.H-<Zn2>.H }'
  feature: FEAT_FP8
  asl:
    iformid: bfcvtn_z8_mz2.xml
    iform: BFCVTN SVE FP8
    iclassid: iclass_sve2
    encoding_name: bfcvtn_z8_mz2_bf2b
    decode_hier: sve.sve_fp_unary_unpred.sve_fp8_fcvt_narrow
  usl:
    flow: bfcvtn_z8_mz2
    decoder: sve
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x650a3800
    mask: 0xfffffc20
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zn:
      hibit: 9
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 2
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bfcvtn_z_mz2_:
  mnemonic: BFCVTN
  instr_class: mortlach2
  asmtemplate: 'BFCVTN  <Zd>.H, { <Zn1>.S-<Zn2>.S }'
  feature: FEAT_SME2
  asl:
    iformid: bfcvtn_z_mz2.xml
    iform: BFCVTN SME
    iclassid: iclass_mortlach2
    encoding_name: bfcvtn_z_mz2_
    decode_hier: sme.mortlach_multi_sve_4.mortlach_multi2_narrow_fp_cvrt
  usl: ~
  fix_encode:
    value: 0xc160e020
    mask: 0xfffffc20
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zn:
      hibit: 9
      width: 4
      encode: == xxxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfcvtnt_z_p_z_s2bf:
  mnemonic: BFCVTNT
  instr_class: sve
  asmtemplate: 'BFCVTNT <Zd>.H, <Pg>/M, <Zn>.S'
  feature: FEAT_BF16
  asl:
    iformid: bfcvtnt_z_p_z.xml
    iform: BFCVTNT
    iclassid: iclass_sve
    encoding_name: bfcvtnt_z_p_z_s2bf
    decode_hier: sve.sve_fp_fcvt2
  usl:
    flow: bfcvtnt_z_p_z
    decoder: sve
    steering:
      - vx_int_mac_cvt
  fix_encode:
    value: 0x648aa000
    mask: 0xffffe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: dst
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bfdot_asimdelem_e:
  mnemonic: BFDOT
  instr_class: advsimd
  asmtemplate: 'BFDOT  <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.2H[<index>]'
  feature: FEAT_BF16
  asl:
    iformid: bfdot_advsimd_elt.xml
    iform: BFDOT (by element)
    iclassid: iclass_2reg_element
    encoding_name: BFDOT_asimdelem_E
    decode_hier: simd-dp.asimdelem
  usl:
    flow: BFDOT_advsimd_elt
    decoder: vx
    steering:
      - vx_any
  fix_encode:
    value: 0x0f40f000
    mask: 0xbfc0f400
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    H:
      hibit: 11
      width: 1
      encode: == x
    L:
      hibit: 21
      width: 1
      encode: == x
    M:
      hibit: 20
      width: 1
      encode: == x
    Q:
      hibit: 30
      width: 1
      encode: == x
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rm:
      hibit: 19
      width: 4
      encode: == xxxx
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint:
    Ta:
      type: normal
      constraints:
        - Q: 0
          boolean: eq
          label: 2S
        - Q: 1
          boolean: eq
          label: 4S
    Tb:
      type: normal
      constraints:
        - Q: 0
          boolean: eq
          label: 4H
        - Q: 1
          boolean: eq
          label: 8H
  undef_constraint: []
  undef_debug_constraint: ~
bfdot_asimdsame2_d:
  mnemonic: BFDOT
  instr_class: advsimd
  asmtemplate: 'BFDOT  <Vd>.<Ta>, <Vn>.<Tb>, <Vm>.<Tb>'
  feature: FEAT_BF16
  asl:
    iformid: bfdot_advsimd_vec.xml
    iform: BFDOT (vector)
    iclassid: iclass_simd
    encoding_name: BFDOT_asimdsame2_D
    decode_hier: simd-dp.asimdsame2
  usl:
    flow: BFDOT_advsimd_vec
    decoder: vx
    steering:
      - vx_any
  fix_encode:
    value: 0x2e40fc00
    mask: 0xbfe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Q:
      hibit: 30
      width: 1
      encode: == x
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    Rm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: src
  constraint:
    Ta:
      type: normal
      constraints:
        - Q: 0
          boolean: eq
          label: 2S
        - Q: 1
          boolean: eq
          label: 4S
    Tb:
      type: normal
      constraints:
        - Q: 0
          boolean: eq
          label: 4H
        - Q: 1
          boolean: eq
          label: 8H
  undef_constraint: []
  undef_debug_constraint: ~
bfdot_z_zzz_:
  mnemonic: BFDOT
  instr_class: sve
  asmtemplate: 'BFDOT   <Zda>.S, <Zn>.H, <Zm>.H'
  feature: FEAT_BF16
  asl:
    iformid: bfdot_z_zzz.xml
    iform: BFDOT (vectors)
    iclassid: iclass_sve
    encoding_name: bfdot_z_zzz_
    decode_hier: sve.sve_fp_fma_w.sve_fp_fdot
  usl:
    flow: bfdot_z_zzz
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x64608000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zda:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bfdot_z_zzzi_:
  mnemonic: BFDOT
  instr_class: sve
  asmtemplate: 'BFDOT   <Zda>.S, <Zn>.H, <Zm>.H[<imm>]'
  feature: FEAT_BF16
  asl:
    iformid: bfdot_z_zzzi.xml
    iform: BFDOT (indexed)
    iclassid: iclass_sve
    encoding_name: bfdot_z_zzzi_
    decode_hier: sve.sve_fp_fma_w_by_indexed_elem.sve_fp_fdot_by_indexed_elem
  usl:
    flow: bfdot_z_zzzi
    decoder: sve
    steering:
      - vx_any
  fix_encode:
    value: 0x64604000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zda:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 18
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    i2:
      hibit: 20
      width: 2
      encode: == xx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bfdot_za_zzi_2xi:
  mnemonic: BFDOT
  instr_class: mortlach2
  asmtemplate: 'BFDOT   ZA.S[<Wv>, <offs>{, VGx2}], { <Zn1>.H-<Zn2>.H }, <Zm>.H[<index>]'
  feature: FEAT_SME2
  asl:
    iformid: bfdot_za_zzi.xml
    iform: BFDOT (multiple and indexed vector) Two ZA single-vectors
    iclassid: iclass_sme_vgx2_single
    encoding_name: bfdot_za_zzi_2xi
    decode_hier: sme.mortlach_multi_indexed_2.mortlach_multi2_zza_idx_s
  usl: ~
  fix_encode:
    value: 0xc1501018
    mask: 0xfff09038
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 4
      encode: == xxxx
    i2:
      hibit: 11
      width: 2
      encode: == xx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfdot_za_zzi_4xi:
  mnemonic: BFDOT
  instr_class: mortlach2
  asmtemplate: 'BFDOT   ZA.S[<Wv>, <offs>{, VGx4}], { <Zn1>.H-<Zn4>.H }, <Zm>.H[<index>]'
  feature: FEAT_SME2
  asl:
    iformid: bfdot_za_zzi.xml
    iform: BFDOT (multiple and indexed vector) Four ZA single-vectors
    iclassid: iclass_sme_vgx4_single
    encoding_name: bfdot_za_zzi_4xi
    decode_hier: sme.mortlach_multi_indexed_3.mortlach_multi4_zza_idx_s
  usl: ~
  fix_encode:
    value: 0xc1509018
    mask: 0xfff09078
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 3
      encode: == xxx
    i2:
      hibit: 11
      width: 2
      encode: == xx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfdot_za_zzv_2x1:
  mnemonic: BFDOT
  instr_class: mortlach2
  asmtemplate: 'BFDOT   ZA.S[<Wv>, <offs>{, VGx2}], { <Zn1>.H-<Zn2>.H }, <Zm>.H'
  feature: FEAT_SME2
  asl:
    iformid: bfdot_za_zzv.xml
    iform: BFDOT (multiple and single vector) Two ZA single-vectors
    iclassid: iclass_sme_vgx2_single
    encoding_name: bfdot_za_zzv_2x1
    decode_hier: sme.mortlach_multi_array_1a.mortlach_multi2_z_za_fpdot_sm
  usl: ~
  fix_encode:
    value: 0xc1201010
    mask: 0xfff09c18
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfdot_za_zzv_4x1:
  mnemonic: BFDOT
  instr_class: mortlach2
  asmtemplate: 'BFDOT   ZA.S[<Wv>, <offs>{, VGx4}], { <Zn1>.H-<Zn4>.H }, <Zm>.H'
  feature: FEAT_SME2
  asl:
    iformid: bfdot_za_zzv.xml
    iform: BFDOT (multiple and single vector) Four ZA single-vectors
    iclassid: iclass_sme_vgx4_single
    encoding_name: bfdot_za_zzv_4x1
    decode_hier: sme.mortlach_multi_array_1b.mortlach_multi4_z_za_fpdot_sm
  usl: ~
  fix_encode:
    value: 0xc1301010
    mask: 0xfff09c18
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfdot_za_zzw_2x2:
  mnemonic: BFDOT
  instr_class: mortlach2
  asmtemplate: 'BFDOT   ZA.S[<Wv>, <offs>{, VGx2}], { <Zn1>.H-<Zn2>.H }, { <Zm1>.H-<Zm2>.H }'
  feature: FEAT_SME2
  asl:
    iformid: bfdot_za_zzw.xml
    iform: BFDOT (multiple vectors) Two ZA single-vectors
    iclassid: iclass_sme_vgx2_single
    encoding_name: bfdot_za_zzw_2x2
    decode_hier: sme.mortlach_multi_array_2a.mortlach_multi2_z_za_fpdot_mm
  usl: ~
  fix_encode:
    value: 0xc1a01010
    mask: 0xffe19c38
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 20
      width: 4
      encode: == xxxx
    Zn:
      hibit: 9
      width: 4
      encode: == xxxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfdot_za_zzw_4x4:
  mnemonic: BFDOT
  instr_class: mortlach2
  asmtemplate: 'BFDOT   ZA.S[<Wv>, <offs>{, VGx4}], { <Zn1>.H-<Zn4>.H }, { <Zm1>.H-<Zm4>.H }'
  feature: FEAT_SME2
  asl:
    iformid: bfdot_za_zzw.xml
    iform: BFDOT (multiple vectors) Four ZA single-vectors
    iclassid: iclass_sme_vgx4_single
    encoding_name: bfdot_za_zzw_4x4
    decode_hier: sme.mortlach_multi_array_2b.mortlach_multi4_z_za_fpdot_mm
  usl: ~
  fix_encode:
    value: 0xc1a11010
    mask: 0xffe39c78
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 20
      width: 3
      encode: == xxx
    Zn:
      hibit: 9
      width: 3
      encode: == xxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfm_32m_bitfield:
  mnemonic: BFM
  instr_class: general
  asmtemplate: 'BFM  <Wd>, <Wn>, #<immr>, #<imms>'
  feature: ~
  asl:
    iformid: bfm.xml
    iform: BFM 32-bit
    iclassid: iclass_nofill
    encoding_name: BFM_32M_bitfield
    decode_hier: dpimm.bitfield
  usl:
    flow: BFM
    decoder: dp
    steering:
      - mx
  fix_encode:
    value: 0x33000000
    mask: 0xffc00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    immr:
      hibit: 21
      width: 6
      encode: == xxxxxx
    imms:
      hibit: 15
      width: 6
      encode: == xxxxxx
  constraint:
    ps_immr:
      type: normal
      constraints:
        - boolean: eq
          immr: 0xxxxx
    ps_imms:
      type: normal
      constraints:
        - boolean: eq
          imms: 0xxxxx
  undef_constraint:
    - immr:
        value: 0b000000
        mask: 0b100000
      imms:
        value: 0b000000
        mask: 0b100000
  undef_debug_constraint: ~
bfm_64m_bitfield:
  mnemonic: BFM
  instr_class: general
  asmtemplate: 'BFM  <Xd>, <Xn>, #<immr>, #<imms>'
  feature: ~
  asl:
    iformid: bfm.xml
    iform: BFM 64-bit
    iclassid: iclass_nofill
    encoding_name: BFM_64M_bitfield
    decode_hier: dpimm.bitfield
  usl:
    flow: BFM
    decoder: dp
    steering:
      - mx
  fix_encode:
    value: 0xb3400000
    mask: 0xffc00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rd:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    immr:
      hibit: 21
      width: 6
      encode: == xxxxxx
    imms:
      hibit: 15
      width: 6
      encode: == xxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
bfmax_mz_zzv_2x1:
  mnemonic: BFMAX
  instr_class: mortlach2
  asmtemplate: 'BFMAX   { <Zdn1>.H-<Zdn2>.H }, { <Zdn1>.H-<Zdn2>.H }, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmax_mz_zzv.xml
    iform: BFMAX (multiple and single vector) Two registers
    iclassid: iclass_to_2reg
    encoding_name: bfmax_mz_zzv_2x1
    decode_hier: sme.mortlach_multi_sve_2a.mortlach_multi2_z_z_fminmax_sm
  usl: ~
  fix_encode:
    value: 0xc120a100
    mask: 0xfff0ffe1
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 4
      encode: == xxxx
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmax_mz_zzv_4x1:
  mnemonic: BFMAX
  instr_class: mortlach2
  asmtemplate: 'BFMAX   { <Zdn1>.H-<Zdn4>.H }, { <Zdn1>.H-<Zdn4>.H }, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmax_mz_zzv.xml
    iform: BFMAX (multiple and single vector) Four registers
    iclassid: iclass_to_4reg
    encoding_name: bfmax_mz_zzv_4x1
    decode_hier: sme.mortlach_multi_sve_2b.mortlach_multi4_z_z_fminmax_sm
  usl: ~
  fix_encode:
    value: 0xc120a900
    mask: 0xfff0ffe3
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 3
      encode: == xxx
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmax_mz_zzw_2x2:
  mnemonic: BFMAX
  instr_class: mortlach2
  asmtemplate: 'BFMAX   { <Zdn1>.H-<Zdn2>.H }, { <Zdn1>.H-<Zdn2>.H }, { <Zm1>.H-<Zm2>.H }'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmax_mz_zzw.xml
    iform: BFMAX (multiple vectors) Two registers
    iclassid: iclass_to_2reg
    encoding_name: bfmax_mz_zzw_2x2
    decode_hier: sme.mortlach_multi_sve_2c.mortlach_multi2_z_z_fminmax_mm
  usl: ~
  fix_encode:
    value: 0xc120b100
    mask: 0xffe1ffe1
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 4
      encode: == xxxx
    Zm:
      hibit: 20
      width: 4
      encode: == xxxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmax_mz_zzw_4x4:
  mnemonic: BFMAX
  instr_class: mortlach2
  asmtemplate: 'BFMAX   { <Zdn1>.H-<Zdn4>.H }, { <Zdn1>.H-<Zdn4>.H }, { <Zm1>.H-<Zm4>.H }'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmax_mz_zzw.xml
    iform: BFMAX (multiple vectors) Four registers
    iclassid: iclass_to_4reg
    encoding_name: bfmax_mz_zzw_4x4
    decode_hier: sme.mortlach_multi_sve_2d.mortlach_multi4_z_z_fminmax_mm
  usl: ~
  fix_encode:
    value: 0xc120b900
    mask: 0xffe3ffe3
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 3
      encode: == xxx
    Zm:
      hibit: 20
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmax_z_p_zz_:
  mnemonic: BFMAX
  instr_class: sve2
  asmtemplate: 'BFMAX   <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmax_z_p_zz.xml
    iform: BFMAX
    iclassid: iclass_sve2
    encoding_name: bfmax_z_p_zz_
    decode_hier: sve.sve_fp_pred.sve_fp_2op_p_zds
  usl: ~
  fix_encode:
    value: 0x65068000
    mask: 0xffffe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmaxnm_mz_zzv_2x1:
  mnemonic: BFMAXNM
  instr_class: mortlach2
  asmtemplate: 'BFMAXNM { <Zdn1>.H-<Zdn2>.H }, { <Zdn1>.H-<Zdn2>.H }, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmaxnm_mz_zzv.xml
    iform: BFMAXNM (multiple and single vector) Two registers
    iclassid: iclass_to_2reg
    encoding_name: bfmaxnm_mz_zzv_2x1
    decode_hier: sme.mortlach_multi_sve_2a.mortlach_multi2_z_z_fminmax_sm
  usl: ~
  fix_encode:
    value: 0xc120a120
    mask: 0xfff0ffe1
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 4
      encode: == xxxx
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmaxnm_mz_zzv_4x1:
  mnemonic: BFMAXNM
  instr_class: mortlach2
  asmtemplate: 'BFMAXNM { <Zdn1>.H-<Zdn4>.H }, { <Zdn1>.H-<Zdn4>.H }, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmaxnm_mz_zzv.xml
    iform: BFMAXNM (multiple and single vector) Four registers
    iclassid: iclass_to_4reg
    encoding_name: bfmaxnm_mz_zzv_4x1
    decode_hier: sme.mortlach_multi_sve_2b.mortlach_multi4_z_z_fminmax_sm
  usl: ~
  fix_encode:
    value: 0xc120a920
    mask: 0xfff0ffe3
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 3
      encode: == xxx
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmaxnm_mz_zzw_2x2:
  mnemonic: BFMAXNM
  instr_class: mortlach2
  asmtemplate: 'BFMAXNM { <Zdn1>.H-<Zdn2>.H }, { <Zdn1>.H-<Zdn2>.H }, { <Zm1>.H-<Zm2>.H }'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmaxnm_mz_zzw.xml
    iform: BFMAXNM (multiple vectors) Two registers
    iclassid: iclass_to_2reg
    encoding_name: bfmaxnm_mz_zzw_2x2
    decode_hier: sme.mortlach_multi_sve_2c.mortlach_multi2_z_z_fminmax_mm
  usl: ~
  fix_encode:
    value: 0xc120b120
    mask: 0xffe1ffe1
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 4
      encode: == xxxx
    Zm:
      hibit: 20
      width: 4
      encode: == xxxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmaxnm_mz_zzw_4x4:
  mnemonic: BFMAXNM
  instr_class: mortlach2
  asmtemplate: 'BFMAXNM { <Zdn1>.H-<Zdn4>.H }, { <Zdn1>.H-<Zdn4>.H }, { <Zm1>.H-<Zm4>.H }'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmaxnm_mz_zzw.xml
    iform: BFMAXNM (multiple vectors) Four registers
    iclassid: iclass_to_4reg
    encoding_name: bfmaxnm_mz_zzw_4x4
    decode_hier: sme.mortlach_multi_sve_2d.mortlach_multi4_z_z_fminmax_mm
  usl: ~
  fix_encode:
    value: 0xc120b920
    mask: 0xffe3ffe3
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 3
      encode: == xxx
    Zm:
      hibit: 20
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmaxnm_z_p_zz_:
  mnemonic: BFMAXNM
  instr_class: sve2
  asmtemplate: 'BFMAXNM <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmaxnm_z_p_zz.xml
    iform: BFMAXNM
    iclassid: iclass_sve2
    encoding_name: bfmaxnm_z_p_zz_
    decode_hier: sve.sve_fp_pred.sve_fp_2op_p_zds
  usl: ~
  fix_encode:
    value: 0x65048000
    mask: 0xffffe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmin_mz_zzv_2x1:
  mnemonic: BFMIN
  instr_class: mortlach2
  asmtemplate: 'BFMIN   { <Zdn1>.H-<Zdn2>.H }, { <Zdn1>.H-<Zdn2>.H }, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmin_mz_zzv.xml
    iform: BFMIN (multiple and single vector) Two registers
    iclassid: iclass_to_2reg
    encoding_name: bfmin_mz_zzv_2x1
    decode_hier: sme.mortlach_multi_sve_2a.mortlach_multi2_z_z_fminmax_sm
  usl: ~
  fix_encode:
    value: 0xc120a101
    mask: 0xfff0ffe1
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 4
      encode: == xxxx
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmin_mz_zzv_4x1:
  mnemonic: BFMIN
  instr_class: mortlach2
  asmtemplate: 'BFMIN   { <Zdn1>.H-<Zdn4>.H }, { <Zdn1>.H-<Zdn4>.H }, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmin_mz_zzv.xml
    iform: BFMIN (multiple and single vector) Four registers
    iclassid: iclass_to_4reg
    encoding_name: bfmin_mz_zzv_4x1
    decode_hier: sme.mortlach_multi_sve_2b.mortlach_multi4_z_z_fminmax_sm
  usl: ~
  fix_encode:
    value: 0xc120a901
    mask: 0xfff0ffe3
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 3
      encode: == xxx
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmin_mz_zzw_2x2:
  mnemonic: BFMIN
  instr_class: mortlach2
  asmtemplate: 'BFMIN   { <Zdn1>.H-<Zdn2>.H }, { <Zdn1>.H-<Zdn2>.H }, { <Zm1>.H-<Zm2>.H }'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmin_mz_zzw.xml
    iform: BFMIN (multiple vectors) Two registers
    iclassid: iclass_to_2reg
    encoding_name: bfmin_mz_zzw_2x2
    decode_hier: sme.mortlach_multi_sve_2c.mortlach_multi2_z_z_fminmax_mm
  usl: ~
  fix_encode:
    value: 0xc120b101
    mask: 0xffe1ffe1
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 4
      encode: == xxxx
    Zm:
      hibit: 20
      width: 4
      encode: == xxxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmin_mz_zzw_4x4:
  mnemonic: BFMIN
  instr_class: mortlach2
  asmtemplate: 'BFMIN   { <Zdn1>.H-<Zdn4>.H }, { <Zdn1>.H-<Zdn4>.H }, { <Zm1>.H-<Zm4>.H }'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmin_mz_zzw.xml
    iform: BFMIN (multiple vectors) Four registers
    iclassid: iclass_to_4reg
    encoding_name: bfmin_mz_zzw_4x4
    decode_hier: sme.mortlach_multi_sve_2d.mortlach_multi4_z_z_fminmax_mm
  usl: ~
  fix_encode:
    value: 0xc120b901
    mask: 0xffe3ffe3
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 3
      encode: == xxx
    Zm:
      hibit: 20
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmin_z_p_zz_:
  mnemonic: BFMIN
  instr_class: sve2
  asmtemplate: 'BFMIN   <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmin_z_p_zz.xml
    iform: BFMIN
    iclassid: iclass_sve2
    encoding_name: bfmin_z_p_zz_
    decode_hier: sve.sve_fp_pred.sve_fp_2op_p_zds
  usl: ~
  fix_encode:
    value: 0x65078000
    mask: 0xffffe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfminnm_mz_zzv_2x1:
  mnemonic: BFMINNM
  instr_class: mortlach2
  asmtemplate: 'BFMINNM { <Zdn1>.H-<Zdn2>.H }, { <Zdn1>.H-<Zdn2>.H }, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfminnm_mz_zzv.xml
    iform: BFMINNM (multiple and single vector) Two registers
    iclassid: iclass_to_2reg
    encoding_name: bfminnm_mz_zzv_2x1
    decode_hier: sme.mortlach_multi_sve_2a.mortlach_multi2_z_z_fminmax_sm
  usl: ~
  fix_encode:
    value: 0xc120a121
    mask: 0xfff0ffe1
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 4
      encode: == xxxx
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfminnm_mz_zzv_4x1:
  mnemonic: BFMINNM
  instr_class: mortlach2
  asmtemplate: 'BFMINNM { <Zdn1>.H-<Zdn4>.H }, { <Zdn1>.H-<Zdn4>.H }, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfminnm_mz_zzv.xml
    iform: BFMINNM (multiple and single vector) Four registers
    iclassid: iclass_to_4reg
    encoding_name: bfminnm_mz_zzv_4x1
    decode_hier: sme.mortlach_multi_sve_2b.mortlach_multi4_z_z_fminmax_sm
  usl: ~
  fix_encode:
    value: 0xc120a921
    mask: 0xfff0ffe3
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 3
      encode: == xxx
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfminnm_mz_zzw_2x2:
  mnemonic: BFMINNM
  instr_class: mortlach2
  asmtemplate: 'BFMINNM { <Zdn1>.H-<Zdn2>.H }, { <Zdn1>.H-<Zdn2>.H }, { <Zm1>.H-<Zm2>.H }'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfminnm_mz_zzw.xml
    iform: BFMINNM (multiple vectors) Two registers
    iclassid: iclass_to_2reg
    encoding_name: bfminnm_mz_zzw_2x2
    decode_hier: sme.mortlach_multi_sve_2c.mortlach_multi2_z_z_fminmax_mm
  usl: ~
  fix_encode:
    value: 0xc120b121
    mask: 0xffe1ffe1
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 4
      encode: == xxxx
    Zm:
      hibit: 20
      width: 4
      encode: == xxxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfminnm_mz_zzw_4x4:
  mnemonic: BFMINNM
  instr_class: mortlach2
  asmtemplate: 'BFMINNM { <Zdn1>.H-<Zdn4>.H }, { <Zdn1>.H-<Zdn4>.H }, { <Zm1>.H-<Zm4>.H }'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfminnm_mz_zzw.xml
    iform: BFMINNM (multiple vectors) Four registers
    iclassid: iclass_to_4reg
    encoding_name: bfminnm_mz_zzw_4x4
    decode_hier: sme.mortlach_multi_sve_2d.mortlach_multi4_z_z_fminmax_mm
  usl: ~
  fix_encode:
    value: 0xc120b921
    mask: 0xffe3ffe3
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zdn:
      hibit: 4
      width: 3
      encode: == xxx
    Zm:
      hibit: 20
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfminnm_z_p_zz_:
  mnemonic: BFMINNM
  instr_class: sve2
  asmtemplate: 'BFMINNM <Zdn>.H, <Pg>/M, <Zdn>.H, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfminnm_z_p_zz.xml
    iform: BFMINNM
    iclassid: iclass_sve2
    encoding_name: bfminnm_z_p_zz_
    decode_hier: sve.sve_fp_pred.sve_fp_2op_p_zds
  usl: ~
  fix_encode:
    value: 0x65058000
    mask: 0xffffe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zdn:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmla_z_p_zzz_:
  mnemonic: BFMLA
  instr_class: sve2
  asmtemplate: 'BFMLA   <Zda>.H, <Pg>/M, <Zn>.H, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmla_z_p_zzz.xml
    iform: BFMLA (vectors)
    iclassid: iclass_sve2
    encoding_name: bfmla_z_p_zzz_
    decode_hier: sve.sve_fp_fma.sve_fp_3op_p_zds_a
  usl: ~
  fix_encode:
    value: 0x65200000
    mask: 0xffe0e000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Pg:
      hibit: 12
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_pred
        use: src
    Zda:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmla_z_zzzi_h:
  mnemonic: BFMLA
  instr_class: sve2
  asmtemplate: 'BFMLA   <Zda>.H, <Zn>.H, <Zm>.H[<imm>]'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmla_z_zzzi.xml
    iform: BFMLA (indexed)
    iclassid: iclass_sve2
    encoding_name: bfmla_z_zzzi_h
    decode_hier: sve.sve_fp_fma_by_indexed_elem
  usl: ~
  fix_encode:
    value: 0x64200800
    mask: 0xffa0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Zda:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src_dst
    Zm:
      hibit: 18
      width: 3
      encode: == xxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    i3h:
      hibit: 22
      width: 1
      encode: == x
    i3l:
      hibit: 20
      width: 2
      encode: == xx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmla_za_zzi_h2xi:
  mnemonic: BFMLA
  instr_class: mortlach2
  asmtemplate: 'BFMLA   ZA.H[<Wv>, <offs>{, VGx2}], { <Zn1>.H-<Zn2>.H }, <Zm>.H[<index>]'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmla_za_zzi.xml
    iform: BFMLA (multiple and indexed vector) Two ZA single-vectors
    iclassid: iclass_sme_vgx2_single
    encoding_name: bfmla_za_zzi_h2xi
    decode_hier: sme.mortlach_multi_indexed_2.mortlach_multi2_zza_idx_h
  usl: ~
  fix_encode:
    value: 0xc1101020
    mask: 0xfff09030
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 4
      encode: == xxxx
    i3h:
      hibit: 11
      width: 2
      encode: == xx
    i3l:
      hibit: 3
      width: 1
      encode: == x
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmla_za_zzi_h4xi:
  mnemonic: BFMLA
  instr_class: mortlach2
  asmtemplate: 'BFMLA   ZA.H[<Wv>, <offs>{, VGx4}], { <Zn1>.H-<Zn4>.H }, <Zm>.H[<index>]'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmla_za_zzi.xml
    iform: BFMLA (multiple and indexed vector) Four ZA single-vectors
    iclassid: iclass_sme_vgx4_single
    encoding_name: bfmla_za_zzi_h4xi
    decode_hier: sme.mortlach_multi_indexed_3.mortlach_multi4_zza_idx_h
  usl: ~
  fix_encode:
    value: 0xc1109020
    mask: 0xfff09070
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 3
      encode: == xxx
    i3h:
      hibit: 11
      width: 2
      encode: == xx
    i3l:
      hibit: 3
      width: 1
      encode: == x
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmla_za_zzv_2x1_16:
  mnemonic: BFMLA
  instr_class: mortlach2
  asmtemplate: 'BFMLA   ZA.H[<Wv>, <offs>{, VGx2}], { <Zn1>.H-<Zn2>.H }, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmla_za_zzv.xml
    iform: BFMLA (multiple and single vector) Two ZA single-vectors
    iclassid: iclass_sme_vgx2_single
    encoding_name: bfmla_za_zzv_2x1_16
    decode_hier: sme.mortlach_multi_array_1a.mortlach_multi2_zz_za_f16_sm
  usl: ~
  fix_encode:
    value: 0xc1601c00
    mask: 0xfff09c18
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmla_za_zzv_4x1_16:
  mnemonic: BFMLA
  instr_class: mortlach2
  asmtemplate: 'BFMLA   ZA.H[<Wv>, <offs>{, VGx4}], { <Zn1>.H-<Zn4>.H }, <Zm>.H'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmla_za_zzv.xml
    iform: BFMLA (multiple and single vector) Four ZA single-vectors
    iclassid: iclass_sme_vgx4_single
    encoding_name: bfmla_za_zzv_4x1_16
    decode_hier: sme.mortlach_multi_array_1b.mortlach_multi4_zz_za_f16_sm
  usl: ~
  fix_encode:
    value: 0xc1701c00
    mask: 0xfff09c18
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 19
      width: 4
      encode: == xxxx
      reginfo:
        cnt: 1
        type: sve_reg
        use: src
    Zn:
      hibit: 9
      width: 5
      encode: == xxxxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmla_za_zzw_2x2_16:
  mnemonic: BFMLA
  instr_class: mortlach2
  asmtemplate: 'BFMLA   ZA.H[<Wv>, <offs>{, VGx2}], { <Zn1>.H-<Zn2>.H }, { <Zm1>.H-<Zm2>.H }'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmla_za_zzw.xml
    iform: BFMLA (multiple vectors) Two ZA single-vectors
    iclassid: iclass_sme_vgx2_single
    encoding_name: bfmla_za_zzw_2x2_16
    decode_hier: sme.mortlach_multi_array_2a.mortlach_multi2_zz_za_f16_mm
  usl: ~
  fix_encode:
    value: 0xc1e01008
    mask: 0xffe19c38
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 20
      width: 4
      encode: == xxxx
    Zn:
      hibit: 9
      width: 4
      encode: == xxxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
bfmla_za_zzw_4x4_16:
  mnemonic: BFMLA
  instr_class: mortlach2
  asmtemplate: 'BFMLA   ZA.H[<Wv>, <offs>{, VGx4}], { <Zn1>.H-<Zn4>.H }, { <Zm1>.H-<Zm4>.H }'
  feature: FEAT_SVE_B16B16
  asl:
    iformid: bfmla_za_zzw.xml
    iform: BFMLA (multiple vectors) Four ZA single-vectors
    iclassid: iclass_sme_vgx4_single
    encoding_name: bfmla_za_zzw_4x4_16
    decode_hier: sme.mortlach_multi_array_2b.mortlach_multi4_zz_za_f16_mm
  usl: ~
  fix_encode:
    value: 0xc1e11008
    mask: 0xffe39c78
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rv:
      hibit: 14
      width: 2
      encode: == xx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Zm:
      hibit: 20
      width: 3
      encode: == xxx
    Zn:
      hibit: 9
      width: 3
      encode: == xxx
    off3:
      hibit: 2
      width: 3
      encode: == xxx
  constraint: {}
  undef_constraint: ~
  undef_debug_constraint: ~
ld1_asisdlse_r1_1v:
  mnemonic: LD1
  instr_class: advsimd
  asmtemplate: 'LD1  { <Vt>.<T> }, [<Xn|SP>]'
  feature: ~
  asl:
    iformid: ld1_advsimd_mult.xml
    iform: 'LD1 (multiple structures) No offset, One register'
    iclassid: iclass_as_no_post_index
    encoding_name: LD1_asisdlse_R1_1v
    decode_hier: ldst.asisdlse
  usl:
    flow: LD1_advsimd_mult
    decoder: vx
    steering:
      - ld
      - ix
  fix_encode:
    value: 0x0c407000
    mask: 0xbffff000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Q:
      hibit: 30
      width: 1
      encode: == x
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    size:
      hibit: 11
      width: 2
      encode: == xx
  constraint:
    T:
      type: cross
      constraints:
        - Q: 0
          boolean: eq
          label: 8B
          size: 00
        - Q: 1
          boolean: eq
          label: 16B
          size: 00
        - Q: 0
          boolean: eq
          label: 4H
          size: 01
        - Q: 1
          boolean: eq
          label: 8H
          size: 01
        - Q: 0
          boolean: eq
          label: 2S
          size: 10
        - Q: 1
          boolean: eq
          label: 4S
          size: 10
        - Q: 0
          boolean: eq
          label: 1D
          size: 11
        - Q: 1
          boolean: eq
          label: 2D
          size: 11
  undef_constraint: []
  undef_debug_constraint: ~
ld1_asisdlsop_b1_i1b:
  mnemonic: LD1
  instr_class: advsimd
  asmtemplate: 'LD1  { <Vt>.B }[<index>], [<Xn|SP>], #1'
  feature: ~
  asl:
    iformid: ld1_advsimd_sngl.xml
    iform: 'LD1 (single structure) Post-index, 8-bit, immediate offset'
    iclassid: iclass_as_post_index
    encoding_name: LD1_asisdlsop_B1_i1b
    decode_hier: ldst.asisdlsop
  usl:
    flow: LD1_advsimd_sngl
    decoder: vx
    steering:
      - ld
      - vx_any
      - ix
  fix_encode:
    value: 0x0ddf0000
    mask: 0xbfffe000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Q:
      hibit: 30
      width: 1
      encode: == x
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src_dst
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        type: simdfp_vec
        use: dst
    S:
      hibit: 12
      width: 1
      encode: == x
    size:
      hibit: 11
      width: 2
      encode: == xx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
ldadd_64_memop:
  mnemonic: LDADD
  instr_class: general
  asmtemplate: 'LDADD  <Xs>, <Xt>, [<Xn|SP>]'
  feature: FEAT_LSE
  asl:
    iformid: ldadd.xml
    iform: 'LDADD 64-bit '
    iclassid: iclass_general
    encoding_name: LDADD_64_memop
    decode_hier: ldst.memop
  usl:
    flow: LDADD
    decoder: ls
    steering:
      - st
  fix_encode:
    value: 0xf8200000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    Rs:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
ldadda_32_memop:
  mnemonic: LDADDA
  instr_class: general
  asmtemplate: 'LDADDA  <Ws>, <Wt>, [<Xn|SP>]'
  feature: FEAT_LSE
  asl:
    iformid: ldadd.xml
    iform: 'LDADDA 32-bit '
    iclassid: iclass_general
    encoding_name: LDADDA_32_memop
    decode_hier: ldst.memop
  usl:
    flow: LDADD
    decoder: ls
    steering:
      - st
  fix_encode:
    value: 0xb8a00000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    Rs:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
ldadda_64_memop:
  mnemonic: LDADDA
  instr_class: general
  asmtemplate: 'LDADDA  <Xs>, <Xt>, [<Xn|SP>]'
  feature: FEAT_LSE
  asl:
    iformid: ldadd.xml
    iform: 'LDADDA 64-bit '
    iclassid: iclass_general
    encoding_name: LDADDA_64_memop
    decode_hier: ldst.memop
  usl:
    flow: LDADD
    decoder: ls
    steering:
      - st
  fix_encode:
    value: 0xf8a00000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    Rs:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: dst
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
ldaddab_32_memop:
  mnemonic: LDADDAB
  instr_class: general
  asmtemplate: 'LDADDAB  <Ws>, <Wt>, [<Xn|SP>]'
  feature: FEAT_LSE
  asl:
    iformid: ldaddb.xml
    iform: LDADDAB
    iclassid: iclass_general
    encoding_name: LDADDAB_32_memop
    decode_hier: ldst.memop
  usl:
    flow: LDADDB
    decoder: ls
    steering:
      - st
  fix_encode:
    value: 0x38a00000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    Rs:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
ldaddah_32_memop:
  mnemonic: LDADDAH
  instr_class: general
  asmtemplate: 'LDADDAH  <Ws>, <Wt>, [<Xn|SP>]'
  feature: FEAT_LSE
  asl:
    iformid: ldaddh.xml
    iform: LDADDAH
    iclassid: iclass_general
    encoding_name: LDADDAH_32_memop
    decode_hier: ldst.memop
  usl:
    flow: LDADDH
    decoder: ls
    steering:
      - st
  fix_encode:
    value: 0x78a00000
    mask: 0xffe0fc00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    Rs:
      hibit: 20
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
ldr_32_ldst_immpost:
  mnemonic: LDR
  instr_class: general
  asmtemplate: 'LDR  <Wt>, [<Xn|SP>], #<simm>'
  feature: ~
  asl:
    iformid: ldr_imm_gen.xml
    iform: 'LDR (immediate) Post-index, 32-bit'
    iclassid: iclass_post_indexed
    encoding_name: LDR_32_ldst_immpost
    decode_hier: ldst.ldst_immpost
  usl:
    flow: LDR_imm_gen
    decoder: ls
    steering:
      - ld
  fix_encode:
    value: 0xb8400400
    mask: 0xffe00c00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src_dst
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    imm9:
      hibit: 20
      width: 9
      encode: == xxxxxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
ldr_32_ldst_immpre:
  mnemonic: LDR
  instr_class: general
  asmtemplate: 'LDR  <Wt>, [<Xn|SP>, #<simm>]!'
  feature: ~
  asl:
    iformid: ldr_imm_gen.xml
    iform: 'LDR (immediate) Pre-index, 32-bit'
    iclassid: iclass_pre_indexed
    encoding_name: LDR_32_ldst_immpre
    decode_hier: ldst.ldst_immpre
  usl:
    flow: LDR_imm_gen
    decoder: ls
    steering:
      - ld
  fix_encode:
    value: 0xb8400c00
    mask: 0xffe00c00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src_dst
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: dst
    imm9:
      hibit: 20
      width: 9
      encode: == xxxxxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
str_32_ldst_immpost:
  mnemonic: STR
  instr_class: general
  asmtemplate: 'STR  <Wt>, [<Xn|SP>], #<simm>'
  feature: ~
  asl:
    iformid: str_imm_gen.xml
    iform: 'STR (immediate) Post-index, 32-bit'
    iclassid: iclass_post_indexed
    encoding_name: STR_32_ldst_immpost
    decode_hier: ldst.ldst_immpost
  usl:
    flow: STR_imm_gen
    decoder: ls
    steering:
      - st
      - ix
  fix_encode:
    value: 0xb8000400
    mask: 0xffe00c00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src_dst
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    imm9:
      hibit: 20
      width: 9
      encode: == xxxxxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
str_32_ldst_immpre:
  mnemonic: STR
  instr_class: general
  asmtemplate: 'STR  <Wt>, [<Xn|SP>, #<simm>]!'
  feature: ~
  asl:
    iformid: str_imm_gen.xml
    iform: 'STR (immediate) Pre-index, 32-bit'
    iclassid: iclass_pre_indexed
    encoding_name: STR_32_ldst_immpre
    decode_hier: ldst.ldst_immpre
  usl:
    flow: STR_imm_gen
    decoder: ls
    steering:
      - st
      - ix
  fix_encode:
    value: 0xb8000c00
    mask: 0xffe00c00
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src_dst
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    imm9:
      hibit: 20
      width: 9
      encode: == xxxxxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
stp_32_ldstpair_post:
  mnemonic: STP
  instr_class: general
  asmtemplate: 'STP  <Wt1>, <Wt2>, [<Xn|SP>], #<imm>'
  feature: ~
  asl:
    iformid: stp_gen.xml
    iform: 'STP Post-index, 32-bit'
    iclassid: iclass_post_indexed
    encoding_name: STP_32_ldstpair_post
    decode_hier: ldst.ldstpair_post
  usl:
    flow: STP_gen
    decoder: ls
    steering:
      - st
      - ix
  fix_encode:
    value: 0x28800000
    mask: 0xffc00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src_dst
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rt2:
      hibit: 14
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    imm7:
      hibit: 21
      width: 7
      encode: == xxxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
stp_32_ldstpair_pre:
  mnemonic: STP
  instr_class: general
  asmtemplate: 'STP  <Wt1>, <Wt2>, [<Xn|SP>, #<imm>]!'
  feature: ~
  asl:
    iformid: stp_gen.xml
    iform: 'STP Pre-index, 32-bit'
    iclassid: iclass_pre_indexed
    encoding_name: STP_32_ldstpair_pre
    decode_hier: ldst.ldstpair_pre
  usl:
    flow: STP_gen
    decoder: ls
    steering:
      - st
      - ix
  fix_encode:
    value: 0x29800000
    mask: 0xffc00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src_dst
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    Rt2:
      hibit: 14
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
    imm7:
      hibit: 21
      width: 7
      encode: == xxxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
stp_64_ldstpair_off:
  mnemonic: STP
  instr_class: general
  asmtemplate: 'STP  <Xt1>, <Xt2>, [<Xn|SP>{, #<imm>}]'
  feature: ~
  asl:
    iformid: stp_gen.xml
    iform: 'STP Signed offset, 64-bit'
    iclassid: iclass_signed_scaled_offset
    encoding_name: STP_64_ldstpair_off
    decode_hier: ldst.ldstpair_off
  usl:
    flow: STP_gen
    decoder: ls
    steering:
      - st
      - ix
  fix_encode:
    value: 0xa9000000
    mask: 0xffc00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    Rt2:
      hibit: 14
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    imm7:
      hibit: 21
      width: 7
      encode: == xxxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
stp_64_ldstpair_post:
  mnemonic: STP
  instr_class: general
  asmtemplate: 'STP  <Xt1>, <Xt2>, [<Xn|SP>], #<imm>'
  feature: ~
  asl:
    iformid: stp_gen.xml
    iform: 'STP Post-index, 64-bit'
    iclassid: iclass_post_indexed
    encoding_name: STP_64_ldstpair_post
    decode_hier: ldst.ldstpair_post
  usl:
    flow: STP_gen
    decoder: ls
    steering:
      - st
      - ix
  fix_encode:
    value: 0xa8800000
    mask: 0xffc00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src_dst
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    Rt2:
      hibit: 14
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    imm7:
      hibit: 21
      width: 7
      encode: == xxxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
stp_64_ldstpair_pre:
  mnemonic: STP
  instr_class: general
  asmtemplate: 'STP  <Xt1>, <Xt2>, [<Xn|SP>, #<imm>]!'
  feature: ~
  asl:
    iformid: stp_gen.xml
    iform: 'STP Pre-index, 64-bit'
    iclassid: iclass_pre_indexed
    encoding_name: STP_64_ldstpair_pre
    decode_hier: ldst.ldstpair_pre
  usl:
    flow: STP_gen
    decoder: ls
    steering:
      - st
      - ix
  fix_encode:
    value: 0xa9800000
    mask: 0xffc00000
    sb_value: 0x00000000
    sb_mask: 0x00000000
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src_dst
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    Rt2:
      hibit: 14
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
    imm7:
      hibit: 21
      width: 7
      encode: == xxxxxxx
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: ~
stlr_sl64_ldstord:
  mnemonic: STLR
  instr_class: general
  asmtemplate: 'STLR  <Xt>, [<Xn|SP>{,#0}]'
  feature: ~
  asl:
    iformid: stlr.xml
    iform: 'STLR No offset, 64-bit'
    iclassid: iclass_base_register
    encoding_name: STLR_SL64_ldstord
    decode_hier: ldst.ldstord
  usl:
    flow: STLR
    decoder: ls
    steering:
      - st
  fix_encode:
    value: 0xc8808000
    mask: 0xffe08000
    sb_value: 0x001f7c00
    sb_mask: 0x001f7c00
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_64
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
stlrb_sl32_ldstord:
  mnemonic: STLRB
  instr_class: general
  asmtemplate: 'STLRB  <Wt>, [<Xn|SP>{,#0}]'
  feature: ~
  asl:
    iformid: stlrb.xml
    iform: STLRB
    iclassid: iclass_base_register
    encoding_name: STLRB_SL32_ldstord
    decode_hier: ldst.ldstord
  usl:
    flow: STLRB
    decoder: ls
    steering:
      - st
  fix_encode:
    value: 0x08808000
    mask: 0xffe08000
    sb_value: 0x001f7c00
    sb_mask: 0x001f7c00
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
stlrh_sl32_ldstord:
  mnemonic: STLRH
  instr_class: general
  asmtemplate: 'STLRH  <Wt>, [<Xn|SP>{,#0}]'
  feature: ~
  asl:
    iformid: stlrh.xml
    iform: STLRH
    iclassid: iclass_base_register
    encoding_name: STLRH_SL32_ldstord
    decode_hier: ldst.ldstord
  usl:
    flow: STLRH
    decoder: ls
    steering:
      - st
  fix_encode:
    value: 0x48808000
    mask: 0xffe08000
    sb_value: 0x001f7c00
    sb_mask: 0x001f7c00
  var_encode:
    Rn:
      hibit: 9
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_sp
        type: gpr_64
        use: src
    Rt:
      hibit: 4
      width: 5
      encode: == xxxxx
      reginfo:
        cnt: 1
        r31: is_zr
        type: gpr_32
        use: src
  constraint: {}
  undef_constraint: []
  undef_debug_constraint: []
