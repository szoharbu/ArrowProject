{
    "instructions": [
        {
            "mnemonic": "ADD",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Adds source register to destination register and stores the result in the destination register.",
            "syntax": "ADD dest_reg, src_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "ADD",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Adds source memory to destination register and stores the result in the destination register.",
            "syntax": "ADD dest_reg, src_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "ADD",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Adds source immediate to destination register and stores the result in the destination register.",
            "syntax": "ADD dest_reg, src_imm",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "SUB",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Subtracts source register from destination register and stores the result in the destination register.",
            "syntax": "SUB dest_reg, src_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "SUB",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Subtracts source memory from destination register and stores the result in the destination register.",
            "syntax": "SUB dest_reg, src_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "SUB",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Subtracts immediate source from destination register and stores the result in the destination register.",
            "syntax": "SUB dest_reg, src_imm",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "MUL",
            "operands": [
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Multiplies the accumulator (AL, AX, or EAX) by the register source operand.",
            "syntax": "MUL src_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "MUL",
            "operands": [
                {
                    "name": "src",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Multiplies the accumulator (AL, AX, or EAX) by the memory source operand.",
            "syntax": "MUL src_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "DIV",
            "operands": [
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Divides the accumulator by the register source operand; result stored in AL/AX/EAX/RAX.",
            "syntax": "DIV src_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "DIV",
            "operands": [
                {
                    "name": "src_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "arithmetic",
            "description": "Divides the accumulator by the memory source operand; result stored in AL/AX/EAX/RAX.",
            "syntax": "DIV src_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "INC",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "increment",
            "description": "Increments the value of the register operand by 1.",
            "syntax": "INC dest_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "INC",
            "operands": [
                {
                    "name": "dest",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "increment",
            "description": "Increments the value of the Memory operand by 1.",
            "syntax": "INC dest_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "DEC",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "decrement",
            "description": "Decrements the value of the register operand by 1.",
            "syntax": "DEC dest_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "DEC",
            "operands": [
                {
                    "name": "dest_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "decrement",
            "description": "Decrements the value of the memory operand by 1.",
            "syntax": "DEC dest_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "AND",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise AND on the operands and stores the result in the destination register.",
            "syntax": "AND dest_reg, src_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "AND",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise AND on the operands and stores the result in the destination register.",
            "syntax": "AND dest_reg, src_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "AND",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise AND on the operands and stores the result in the destination register.",
            "syntax": "AND dest_reg, src_imm",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "OR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise OR on the operands and stores the result in the destination register.",
            "syntax": "OR dest_reg, src_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "OR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise OR on the operands and stores the result in the destination register.",
            "syntax": "OR dest_reg, src_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "OR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise OR on the operands and stores the result in the destination register.",
            "syntax": "OR dest_reg, src_imm",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "XOR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise XOR on the operands and stores the result in the destination register.",
            "syntax": "XOR dest_reg, src_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "XOR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise XOR on the operands and stores the result in the destination register.",
            "syntax": "XOR dest_reg, src_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "XOR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise XOR on the operands and stores the result in the destination register.",
            "syntax": "XOR dest_reg, src_imm",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "NOT",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise NOT on the register operand.",
            "syntax": "NOT dest_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "NOT",
            "operands": [
                {
                    "name": "dest_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise NOT on the memory operand.",
            "syntax": "NOT dest_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "SHL",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "count",
                    "type": "imm",
                    "role": "src",
                    "size": "8-bit"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Shifts bits in the destination register operand left by a specified count.",
            "syntax": "SHL dest_reg, count",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "SHL",
            "operands": [
                {
                    "name": "dest_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "count",
                    "type": "imm",
                    "role": "src",
                    "size": "8-bit"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Shifts bits in the destination memory operand left by a specified count.",
            "syntax": "SHL dest_mem, count",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "SHR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "count",
                    "type": "imm",
                    "role": "src",
                    "size": "8-bit"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Shifts bits in the destination register operand right by a specified count.",
            "syntax": "SHR dest_reg, count",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "SHR",
            "operands": [
                {
                    "name": "dest_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "count",
                    "type": "imm",
                    "role": "src",
                    "size": "8-bit"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Shifts bits in the destination memory operand right by a specified count.",
            "syntax": "SHR dest_mem, count",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "ROL",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "count",
                    "type": "imm",
                    "role": "src",
                    "size": "8-bit"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "rotate bits in the destination register operand left by a specified count.",
            "syntax": "ROL dest_reg, count",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "ROL",
            "operands": [
                {
                    "name": "dest_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "count",
                    "type": "imm",
                    "role": "src",
                    "size": "8-bit"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "rotate bits in the destination memory operand left by a specified count.",
            "syntax": "ROL dest_mem, count",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "ROR",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "count",
                    "type": "imm",
                    "role": "src",
                    "size": "8-bit"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Rotate bits in the destination register operand right by a specified count.",
            "syntax": "ROR dest_reg, count",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "ROR",
            "operands": [
                {
                    "name": "dest_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "count",
                    "type": "imm",
                    "role": "src",
                    "size": "8-bit"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Rotate bits in the destination memory operand right by a specified count.",
            "syntax": "ROR dest_mem, count",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "MOV",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "data_transfer",
            "description": "Moves data from source to destination.",
            "syntax": "MOV dest_reg, src_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "MOV",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "data_transfer",
            "description": "Moves data from source to destination.",
            "syntax": "MOV dest_reg, src_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "MOV",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "data_transfer",
            "description": "Moves data from source to destination.",
            "syntax": "MOV dest_reg, src_imm",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "MOV",
            "operands": [
                {
                    "name": "dest_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "data_transfer",
            "description": "Moves data from source to destination.",
            "syntax": "MOV dest_mem, src_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "MOV",
            "operands": [
                {
                    "name": "dest_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "data_transfer",
            "description": "Moves data from source to destination.",
            "syntax": "MOV dest_mem, src_imm",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "PUSH",
            "operands": [
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "stack",
            "description": "Pushes register operand onto the stack.",
            "syntax": "PUSH src_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "PUSH",
            "operands": [
                {
                    "name": "src_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "stack",
            "description": "Pushes memory operand onto the stack.",
            "syntax": "PUSH src_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "PUSH",
            "operands": [
                {
                    "name": "src_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "stack",
            "description": "Pushes immediate operand onto the stack.",
            "syntax": "PUSH src_mm",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "POP",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "stack",
            "description": "Pops the top of the stack into the destination operand.",
            "syntax": "POP dest_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "POP",
            "operands": [
                {
                    "name": "dest_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "stack",
            "description": "Pops the top of the stack into the destination operand.",
            "syntax": "POP dest_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "CALL",
            "operands": [
                {
                    "name": "address_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "control",
            "group": "procedure",
            "description": "Calls a procedure at the specified address.",
            "syntax": "CALL address_mem",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "CALL",
            "operands": [
                {
                    "name": "address_offset",
                    "type": "imm",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "control",
            "group": "procedure",
            "description": "Calls a procedure at the specified address.",
            "syntax": "CALL address_offset",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "RET",
            "operands": [],
            "type": "control",
            "group": "procedure",
            "description": "Returns from the current procedure.",
            "syntax": "RET",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "NOP",
            "operands": [],
            "type": "control",
            "group": "no_operation",
            "description": "No operation.",
            "syntax": "NOP",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "JMP",
            "operands": [
                {
                    "name": "address_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "control",
            "group": "jump",
            "description": "Jumps to a specified address.",
            "syntax": "JMP address_mem",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "JMP",
            "operands": [
                {
                    "name": "address_offset",
                    "type": "imm",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "control",
            "group": "jump",
            "description": "Jumps to a specified address.",
            "syntax": "JMP address_offset",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "JE",
            "operands": [
                {
                    "name": "address_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "control",
            "group": "conditional_jump",
            "description": "Jumps to the specified address if the zero flag is set (equal).",
            "syntax": "JE address_mem",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "JE",
            "operands": [
                {
                    "name": "address_offset",
                    "type": "imm",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "control",
            "group": "conditional_jump",
            "description": "Jumps to the specified address if the zero flag is set (equal).",
            "syntax": "JE address_offset",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "JNE",
            "operands": [
                {
                    "name": "address_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "control",
            "group": "conditional_jump",
            "description": "Jumps to the specified address if the zero flag is not set (not equal).",
            "syntax": "JNE address_mem",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "JNE",
            "operands": [
                {
                    "name": "address_offset",
                    "type": "imm",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "control",
            "group": "conditional_jump",
            "description": "Jumps to the specified address if the zero flag is not set (not equal).",
            "syntax": "JNE address_offset",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "JG",
            "operands": [
                {
                    "name": "address_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "control",
            "group": "conditional_jump",
            "description": "Jumps if the destination is greater (signed comparison).",
            "syntax": "JG address_mem",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "JG",
            "operands": [
                {
                    "name": "address_offset",
                    "type": "imm",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "control",
            "group": "conditional_jump",
            "description": "Jumps if the destination is greater (signed comparison).",
            "syntax": "JG address_offset",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "JL",
            "operands": [
                {
                    "name": "address_mem",
                    "type": "mem",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "control",
            "group": "conditional_jump",
            "description": "Jumps if the destination is less than (signed comparison).",
            "syntax": "JL address_mem",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "JL",
            "operands": [
                {
                    "name": "address_offset",
                    "type": "imm",
                    "role": "dest",
                    "size": "variable_width"
                }
            ],
            "type": "control",
            "group": "conditional_jump",
            "description": "Jumps if the destination is less than (signed comparison).",
            "syntax": "JL address_offset",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "CMP",
            "operands": [
                {
                    "name": "op1_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                },
                {
                    "name": "op2_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "comparison",
            "description": "Compares two operands and sets flags based on the result.",
            "syntax": "CMP op1_reg, op2_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "CMP",
            "operands": [
                {
                    "name": "op1_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                },
                {
                    "name": "op2_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "comparison",
            "description": "Compares two operands and sets flags based on the result.",
            "syntax": "CMP op1_reg, op2_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "CMP",
            "operands": [
                {
                    "name": "op1_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                },
                {
                    "name": "op2_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "comparison",
            "description": "Compares two operands and sets flags based on the result.",
            "syntax": "CMP op1_reg, op2_imm",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "CMP",
            "operands": [
                {
                    "name": "op1_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                },
                {
                    "name": "op2_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "comparison",
            "description": "Compares two operands and sets flags based on the result.",
            "syntax": "CMP op1_mem, op2_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "CMP",
            "operands": [
                {
                    "name": "op1_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                },
                {
                    "name": "op2_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "arithmetic",
            "group": "comparison",
            "description": "Compares two operands and sets flags based on the result.",
            "syntax": "CMP op1_mem, op2_imm",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "TEST",
            "operands": [
                {
                    "name": "op1_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                },
                {
                    "name": "op2_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise AND on the operands and sets flags based on the result.",
            "syntax": "TEST op1_reg, op2_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "TEST",
            "operands": [
                {
                    "name": "op1_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                },
                {
                    "name": "op2_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise AND on the operands and sets flags based on the result.",
            "syntax": "TEST op1_reg, op2_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "TEST",
            "operands": [
                {
                    "name": "op1_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                },
                {
                    "name": "op2_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise AND on the operands and sets flags based on the result.",
            "syntax": "TEST op1_reg, op2_imm",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "TEST",
            "operands": [
                {
                    "name": "op1_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                },
                {
                    "name": "op2_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise AND on the operands and sets flags based on the result.",
            "syntax": "TEST op1_mem, op2_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "TEST",
            "operands": [
                {
                    "name": "op1_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                },
                {
                    "name": "op2_imm",
                    "type": "imm",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "logical",
            "group": "bitwise",
            "description": "Performs a bitwise AND on the operands and sets flags based on the result.",
            "syntax": "TEST op1_mem, op2_imm",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "LEA",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "data_transfer",
            "description": "Loads an effective address into the destination register.",
            "syntax": "LEA dest_reg, src",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "STOSB",
            "operands": [],
            "type": "data",
            "group": "string_operation",
            "description": "Stores byte in AL at the address pointed to by EDI/RDI, and increments/decrements EDI/RDI.",
            "syntax": "STOSB",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "LODSB",
            "operands": [],
            "type": "data",
            "group": "string_operation",
            "description": "Loads a byte from the address pointed to by ESI/RSI into AL, and increments/decrements ESI/RSI.",
            "syntax": "LODSB",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "SCASB",
            "operands": [],
            "type": "data",
            "group": "string_operation",
            "description": "Compares byte in AL with the byte at the address pointed to by EDI/RDI, setting flags accordingly.",
            "syntax": "SCASB",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "MOVSB",
            "operands": [],
            "type": "data",
            "group": "string_operation",
            "description": "Moves byte from address in ESI/RSI to EDI/RDI, then increments/decrements both.",
            "syntax": "MOVSB",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "CMPSB",
            "operands": [],
            "type": "data",
            "group": "string_operation",
            "description": "Compares byte at ESI/RSI with byte at EDI/RDI and sets flags accordingly.",
            "syntax": "CMPSB",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "INT",
            "operands": [
                {
                    "name": "interrupt_number",
                    "type": "imm",
                    "role": "src",
                    "size": "8-bit"
                }
            ],
            "type": "control",
            "group": "interrupt",
            "description": "Triggers a software interrupt with the specified interrupt number.",
            "syntax": "INT interrupt_number",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "HLT",
            "operands": [],
            "type": "control",
            "group": "halt",
            "description": "Halts the processor until the next external interrupt is received.",
            "syntax": "HLT",
            "architecture_modes": ["x86", "x86-64"],
            "random_generate": "False"
        },
        {
            "mnemonic": "CLC",
            "operands": [],
            "type": "logical",
            "group": "flags",
            "description": "Clears the carry flag (CF).",
            "syntax": "CLC",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "STC",
            "operands": [],
            "type": "logical",
            "group": "flags",
            "description": "Sets the carry flag (CF).",
            "syntax": "STC",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "CLD",
            "operands": [],
            "type": "logical",
            "group": "flags",
            "description": "Clears the direction flag (DF), causing string operations to increment pointers.",
            "syntax": "CLD",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "STD",
            "operands": [],
            "type": "logical",
            "group": "flags",
            "description": "Sets the direction flag (DF), causing string operations to decrement pointers.",
            "syntax": "STD",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "PAUSE",
            "operands": [],
            "type": "control",
            "group": "hint",
            "description": "Indicates a spin-wait loop to the processor, optimizing for power and performance.",
            "syntax": "PAUSE",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "MOVZX",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "data_transfer",
            "description": "Moves data to a larger register with zero extension.",
            "syntax": "MOVZX dest_reg, src_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "MOVZX",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "data_transfer",
            "description": "Moves data to a larger register with zero extension.",
            "syntax": "MOVZX dest_reg, src_mem",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "MOVSX",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_reg",
                    "type": "reg",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "data_transfer",
            "description": "Moves data to a larger register with sign extension.",
            "syntax": "MOVSX dest_reg, src_reg",
            "architecture_modes": ["x86", "x86-64"]
        },
        {
            "mnemonic": "MOVSX",
            "operands": [
                {
                    "name": "dest_reg",
                    "type": "reg",
                    "role": "dest",
                    "size": "variable_width"
                },
                {
                    "name": "src_mem",
                    "type": "mem",
                    "role": "src",
                    "size": "variable_width"
                }
            ],
            "type": "data",
            "group": "data_transfer",
            "description": "Moves data to a larger register with sign extension.",
            "syntax": "MOVSX dest_reg, src_mem",
            "architecture_modes": ["x86", "x86-64"]
        }
    ]
}
