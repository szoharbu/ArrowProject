
from typing import Optional

__all__ = ["MemoryManager_API"]  # Only export MemoryManager_API

class MemoryManager_API:

    from Tool.memory_management.memory import Memory as _Memory
    from Tool.memory_management.memory_block import MemoryBlock as _MemoryBlock
    from Tool.memory_management.memory_segments import MemorySegment as _MemorySegment
    from Utils.configuration_management import Configuration as _Configuration

    @staticmethod
    def Memory(
            name: Optional[str] = None,
            address: Optional[int] = None,
            byte_size: Optional[int] = 8,
            memory_type: Optional[str] = "WB",
            shared: bool = False,
            init_value: int = None,
            memory_block: _MemoryBlock = None,
            memory_block_offset: int = None
    ) -> _Memory:
        """
        Allocate a Memory to be used as memory operand.
        """
        from Tool.memory_management.memory import Memory as _Memory

        return _Memory(name=name, address=address, byte_size=byte_size, memory_type=memory_type, shared=shared,
                      init_value=init_value, memory_block=memory_block, memory_block_offset=memory_block_offset )

    @staticmethod
    def MemoryBlock(
            byte_size: int,
            name: Optional[str] = None,
            address: Optional[int] = None,
            memory_type: Optional[str] = "WB",
            shared: bool = False,
            alignment: Optional[int] = None,
            init_value: int = None,
            init_value_byte_representation: list[int] = None, # an optional to pass the init_value as a list of smaller bytes
            _use_name_as_unique_label: bool = False, # needed for cases the MemoryBlock was auto-generated by Memory without a block
    ) -> _MemoryBlock:
        """
        Allocate a MemoryBlock.
        """
        from Tool.memory_management.memory_block import MemoryBlock as _MemoryBlock

        return _MemoryBlock(byte_size=byte_size, name=name, address=address, memory_type=memory_type,shared=shared, alignment=alignment, init_value=init_value, init_value_byte_representation=init_value_byte_representation)

    @staticmethod
    def MemorySegment(
            name: str,
            byte_size:int,
            memory_type:_Configuration.Memory_types,
    ) -> _MemorySegment:
        """
        Allocate a segment of memory for either code or data
        """
        from Tool.state_management import get_current_state
        current_state = get_current_state()
        return current_state.segment_manager.allocate_memory_segment(name=name, byte_size=byte_size, memory_type=memory_type)
